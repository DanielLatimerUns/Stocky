#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Stocky.DataAcesse.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Stocky")]
	public partial class StockyDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertdtVendor(dtVendor instance);
    partial void UpdatedtVendor(dtVendor instance);
    partial void DeletedtVendor(dtVendor instance);
    partial void InsertdtAddress(dtAddress instance);
    partial void UpdatedtAddress(dtAddress instance);
    partial void DeletedtAddress(dtAddress instance);
    partial void InsertdtAddressPersonRelationShip(dtAddressPersonRelationShip instance);
    partial void UpdatedtAddressPersonRelationShip(dtAddressPersonRelationShip instance);
    partial void DeletedtAddressPersonRelationShip(dtAddressPersonRelationShip instance);
    partial void InsertdtCategory(dtCategory instance);
    partial void UpdatedtCategory(dtCategory instance);
    partial void DeletedtCategory(dtCategory instance);
    partial void InsertdtConfig(dtConfig instance);
    partial void UpdatedtConfig(dtConfig instance);
    partial void DeletedtConfig(dtConfig instance);
    partial void InsertdtPerson(dtPerson instance);
    partial void UpdatedtPerson(dtPerson instance);
    partial void DeletedtPerson(dtPerson instance);
    partial void InsertdtPurchese(dtPurchese instance);
    partial void UpdatedtPurchese(dtPurchese instance);
    partial void DeletedtPurchese(dtPurchese instance);
    partial void InsertdtRefund(dtRefund instance);
    partial void UpdatedtRefund(dtRefund instance);
    partial void DeletedtRefund(dtRefund instance);
    partial void InsertdtSale(dtSale instance);
    partial void UpdatedtSale(dtSale instance);
    partial void DeletedtSale(dtSale instance);
    partial void InsertdtSettingLookup(dtSettingLookup instance);
    partial void UpdatedtSettingLookup(dtSettingLookup instance);
    partial void DeletedtSettingLookup(dtSettingLookup instance);
    partial void InsertdtStockDetail(dtStockDetail instance);
    partial void UpdatedtStockDetail(dtStockDetail instance);
    partial void DeletedtStockDetail(dtStockDetail instance);
    partial void InsertdtStockHistory(dtStockHistory instance);
    partial void UpdatedtStockHistory(dtStockHistory instance);
    partial void DeletedtStockHistory(dtStockHistory instance);
    partial void InsertdtTheme(dtTheme instance);
    partial void UpdatedtTheme(dtTheme instance);
    partial void DeletedtTheme(dtTheme instance);
    partial void InsertdtTransactionLedger(dtTransactionLedger instance);
    partial void UpdatedtTransactionLedger(dtTransactionLedger instance);
    partial void DeletedtTransactionLedger(dtTransactionLedger instance);
    partial void InsertdtUser(dtUser instance);
    partial void UpdatedtUser(dtUser instance);
    partial void DeletedtUser(dtUser instance);
    partial void InsertdtUserDetail(dtUserDetail instance);
    partial void UpdatedtUserDetail(dtUserDetail instance);
    partial void DeletedtUserDetail(dtUserDetail instance);
    partial void InsertdtUserPreferance(dtUserPreferance instance);
    partial void UpdatedtUserPreferance(dtUserPreferance instance);
    partial void DeletedtUserPreferance(dtUserPreferance instance);
    partial void InsertdtUserPreferanceType(dtUserPreferanceType instance);
    partial void UpdatedtUserPreferanceType(dtUserPreferanceType instance);
    partial void DeletedtUserPreferanceType(dtUserPreferanceType instance);
    partial void InsertdtValueBand(dtValueBand instance);
    partial void UpdatedtValueBand(dtValueBand instance);
    partial void DeletedtValueBand(dtValueBand instance);
    partial void InsertdtStock(dtStock instance);
    partial void UpdatedtStock(dtStock instance);
    partial void DeletedtStock(dtStock instance);
    partial void InsertdtNotification(dtNotification instance);
    partial void UpdatedtNotification(dtNotification instance);
    partial void DeletedtNotification(dtNotification instance);
    #endregion
		
		public StockyDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockyDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockyDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockyDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<dtVendor> dtVendors
		{
			get
			{
				return this.GetTable<dtVendor>();
			}
		}
		
		public System.Data.Linq.Table<dtAddress> dtAddresses
		{
			get
			{
				return this.GetTable<dtAddress>();
			}
		}
		
		public System.Data.Linq.Table<dtAddressPersonRelationShip> dtAddressPersonRelationShips
		{
			get
			{
				return this.GetTable<dtAddressPersonRelationShip>();
			}
		}
		
		public System.Data.Linq.Table<dtCategory> dtCategories
		{
			get
			{
				return this.GetTable<dtCategory>();
			}
		}
		
		public System.Data.Linq.Table<dtConfig> dtConfigs
		{
			get
			{
				return this.GetTable<dtConfig>();
			}
		}
		
		public System.Data.Linq.Table<dtPerson> dtPersons
		{
			get
			{
				return this.GetTable<dtPerson>();
			}
		}
		
		public System.Data.Linq.Table<dtPurchese> dtPurcheses
		{
			get
			{
				return this.GetTable<dtPurchese>();
			}
		}
		
		public System.Data.Linq.Table<dtRefund> dtRefunds
		{
			get
			{
				return this.GetTable<dtRefund>();
			}
		}
		
		public System.Data.Linq.Table<dtSale> dtSales
		{
			get
			{
				return this.GetTable<dtSale>();
			}
		}
		
		public System.Data.Linq.Table<dtSettingLookup> dtSettingLookups
		{
			get
			{
				return this.GetTable<dtSettingLookup>();
			}
		}
		
		public System.Data.Linq.Table<dtStockDetail> dtStockDetails
		{
			get
			{
				return this.GetTable<dtStockDetail>();
			}
		}
		
		public System.Data.Linq.Table<dtStockHistory> dtStockHistories
		{
			get
			{
				return this.GetTable<dtStockHistory>();
			}
		}
		
		public System.Data.Linq.Table<dtTheme> dtThemes
		{
			get
			{
				return this.GetTable<dtTheme>();
			}
		}
		
		public System.Data.Linq.Table<dtTransactionLedger> dtTransactionLedgers
		{
			get
			{
				return this.GetTable<dtTransactionLedger>();
			}
		}
		
		public System.Data.Linq.Table<dtUser> dtUsers
		{
			get
			{
				return this.GetTable<dtUser>();
			}
		}
		
		public System.Data.Linq.Table<dtUserDetail> dtUserDetails
		{
			get
			{
				return this.GetTable<dtUserDetail>();
			}
		}
		
		public System.Data.Linq.Table<dtUserPreferance> dtUserPreferances
		{
			get
			{
				return this.GetTable<dtUserPreferance>();
			}
		}
		
		public System.Data.Linq.Table<dtUserPreferanceType> dtUserPreferanceTypes
		{
			get
			{
				return this.GetTable<dtUserPreferanceType>();
			}
		}
		
		public System.Data.Linq.Table<dtValueBand> dtValueBands
		{
			get
			{
				return this.GetTable<dtValueBand>();
			}
		}
		
		public System.Data.Linq.Table<dtStock> dtStocks
		{
			get
			{
				return this.GetTable<dtStock>();
			}
		}
		
		public System.Data.Linq.Table<dtNotification> dtNotifications
		{
			get
			{
				return this.GetTable<dtNotification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtVendor")]
	public partial class dtVendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vID;
		
		private string _VendorsName;
		
		private string _VendorsDescption;
		
		private System.Nullable<bool> _OnlineVender;
		
		private System.Nullable<int> _AddresseID;
		
		private EntitySet<dtPurchese> _dtPurcheses;
		
		private EntityRef<dtAddress> _dtAddress;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvIDChanging(int value);
    partial void OnvIDChanged();
    partial void OnVendorsNameChanging(string value);
    partial void OnVendorsNameChanged();
    partial void OnVendorsDescptionChanging(string value);
    partial void OnVendorsDescptionChanged();
    partial void OnOnlineVenderChanging(System.Nullable<bool> value);
    partial void OnOnlineVenderChanged();
    partial void OnAddresseIDChanging(System.Nullable<int> value);
    partial void OnAddresseIDChanged();
    #endregion
		
		public dtVendor()
		{
			this._dtPurcheses = new EntitySet<dtPurchese>(new Action<dtPurchese>(this.attach_dtPurcheses), new Action<dtPurchese>(this.detach_dtPurcheses));
			this._dtAddress = default(EntityRef<dtAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vID
		{
			get
			{
				return this._vID;
			}
			set
			{
				if ((this._vID != value))
				{
					this.OnvIDChanging(value);
					this.SendPropertyChanging();
					this._vID = value;
					this.SendPropertyChanged("vID");
					this.OnvIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorsName", DbType="NVarChar(50)")]
		public string VendorsName
		{
			get
			{
				return this._VendorsName;
			}
			set
			{
				if ((this._VendorsName != value))
				{
					this.OnVendorsNameChanging(value);
					this.SendPropertyChanging();
					this._VendorsName = value;
					this.SendPropertyChanged("VendorsName");
					this.OnVendorsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorsDescption", DbType="NVarChar(250)")]
		public string VendorsDescption
		{
			get
			{
				return this._VendorsDescption;
			}
			set
			{
				if ((this._VendorsDescption != value))
				{
					this.OnVendorsDescptionChanging(value);
					this.SendPropertyChanging();
					this._VendorsDescption = value;
					this.SendPropertyChanged("VendorsDescption");
					this.OnVendorsDescptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlineVender", DbType="Bit")]
		public System.Nullable<bool> OnlineVender
		{
			get
			{
				return this._OnlineVender;
			}
			set
			{
				if ((this._OnlineVender != value))
				{
					this.OnOnlineVenderChanging(value);
					this.SendPropertyChanging();
					this._OnlineVender = value;
					this.SendPropertyChanged("OnlineVender");
					this.OnOnlineVenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddresseID", DbType="Int")]
		public System.Nullable<int> AddresseID
		{
			get
			{
				return this._AddresseID;
			}
			set
			{
				if ((this._AddresseID != value))
				{
					if (this._dtAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddresseIDChanging(value);
					this.SendPropertyChanging();
					this._AddresseID = value;
					this.SendPropertyChanged("AddresseID");
					this.OnAddresseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtVendor_dtPurchese", Storage="_dtPurcheses", ThisKey="vID", OtherKey="VendorID")]
		public EntitySet<dtPurchese> dtPurcheses
		{
			get
			{
				return this._dtPurcheses;
			}
			set
			{
				this._dtPurcheses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtAddress_dtVendor", Storage="_dtAddress", ThisKey="AddresseID", OtherKey="aID", IsForeignKey=true)]
		public dtAddress dtAddress
		{
			get
			{
				return this._dtAddress.Entity;
			}
			set
			{
				dtAddress previousValue = this._dtAddress.Entity;
				if (((previousValue != value) 
							|| (this._dtAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtAddress.Entity = null;
						previousValue.dtVendors.Remove(this);
					}
					this._dtAddress.Entity = value;
					if ((value != null))
					{
						value.dtVendors.Add(this);
						this._AddresseID = value.aID;
					}
					else
					{
						this._AddresseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtPurcheses(dtPurchese entity)
		{
			this.SendPropertyChanging();
			entity.dtVendor = this;
		}
		
		private void detach_dtPurcheses(dtPurchese entity)
		{
			this.SendPropertyChanging();
			entity.dtVendor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtAddress")]
	public partial class dtAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _aID;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _AddressLine3;
		
		private string _PostCode;
		
		private string _Town;
		
		private string _Country;
		
		private string _County;
		
		private System.Nullable<bool> _isActive;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<dtVendor> _dtVendors;
		
		private EntitySet<dtAddressPersonRelationShip> _dtAddressPersonRelationShips;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnaIDChanging(int value);
    partial void OnaIDChanged();
    partial void OnAddressLine1Changing(string value);
    partial void OnAddressLine1Changed();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnAddressLine3Changing(string value);
    partial void OnAddressLine3Changed();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCountyChanging(string value);
    partial void OnCountyChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public dtAddress()
		{
			this._dtVendors = new EntitySet<dtVendor>(new Action<dtVendor>(this.attach_dtVendors), new Action<dtVendor>(this.detach_dtVendors));
			this._dtAddressPersonRelationShips = new EntitySet<dtAddressPersonRelationShip>(new Action<dtAddressPersonRelationShip>(this.attach_dtAddressPersonRelationShips), new Action<dtAddressPersonRelationShip>(this.detach_dtAddressPersonRelationShips));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int aID
		{
			get
			{
				return this._aID;
			}
			set
			{
				if ((this._aID != value))
				{
					this.OnaIDChanging(value);
					this.SendPropertyChanging();
					this._aID = value;
					this.SendPropertyChanged("aID");
					this.OnaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", DbType="NVarChar(150)")]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this.OnAddressLine1Changing(value);
					this.SendPropertyChanging();
					this._AddressLine1 = value;
					this.SendPropertyChanged("AddressLine1");
					this.OnAddressLine1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", DbType="NVarChar(150)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine3", DbType="NVarChar(150)")]
		public string AddressLine3
		{
			get
			{
				return this._AddressLine3;
			}
			set
			{
				if ((this._AddressLine3 != value))
				{
					this.OnAddressLine3Changing(value);
					this.SendPropertyChanging();
					this._AddressLine3 = value;
					this.SendPropertyChanged("AddressLine3");
					this.OnAddressLine3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="NVarChar(50)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(50)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_County", DbType="NVarChar(50)")]
		public string County
		{
			get
			{
				return this._County;
			}
			set
			{
				if ((this._County != value))
				{
					this.OnCountyChanging(value);
					this.SendPropertyChanging();
					this._County = value;
					this.SendPropertyChanged("County");
					this.OnCountyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtAddress_dtVendor", Storage="_dtVendors", ThisKey="aID", OtherKey="AddresseID")]
		public EntitySet<dtVendor> dtVendors
		{
			get
			{
				return this._dtVendors;
			}
			set
			{
				this._dtVendors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtAddress_dtAddressPersonRelationShip", Storage="_dtAddressPersonRelationShips", ThisKey="aID", OtherKey="AddressID")]
		public EntitySet<dtAddressPersonRelationShip> dtAddressPersonRelationShips
		{
			get
			{
				return this._dtAddressPersonRelationShips;
			}
			set
			{
				this._dtAddressPersonRelationShips.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtVendors(dtVendor entity)
		{
			this.SendPropertyChanging();
			entity.dtAddress = this;
		}
		
		private void detach_dtVendors(dtVendor entity)
		{
			this.SendPropertyChanging();
			entity.dtAddress = null;
		}
		
		private void attach_dtAddressPersonRelationShips(dtAddressPersonRelationShip entity)
		{
			this.SendPropertyChanging();
			entity.dtAddress = this;
		}
		
		private void detach_dtAddressPersonRelationShips(dtAddressPersonRelationShip entity)
		{
			this.SendPropertyChanging();
			entity.dtAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtAddressPersonRelationShip")]
	public partial class dtAddressPersonRelationShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RelationshipID;
		
		private int _AddressID;
		
		private int _PersonID;
		
		private EntityRef<dtAddress> _dtAddress;
		
		private EntityRef<dtPerson> _dtPerson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationshipIDChanging(int value);
    partial void OnRelationshipIDChanged();
    partial void OnAddressIDChanging(int value);
    partial void OnAddressIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public dtAddressPersonRelationShip()
		{
			this._dtAddress = default(EntityRef<dtAddress>);
			this._dtPerson = default(EntityRef<dtPerson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RelationshipID
		{
			get
			{
				return this._RelationshipID;
			}
			set
			{
				if ((this._RelationshipID != value))
				{
					this.OnRelationshipIDChanging(value);
					this.SendPropertyChanging();
					this._RelationshipID = value;
					this.SendPropertyChanged("RelationshipID");
					this.OnRelationshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressID", DbType="Int NOT NULL")]
		public int AddressID
		{
			get
			{
				return this._AddressID;
			}
			set
			{
				if ((this._AddressID != value))
				{
					if (this._dtAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIDChanging(value);
					this.SendPropertyChanging();
					this._AddressID = value;
					this.SendPropertyChanged("AddressID");
					this.OnAddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._dtPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtAddress_dtAddressPersonRelationShip", Storage="_dtAddress", ThisKey="AddressID", OtherKey="aID", IsForeignKey=true)]
		public dtAddress dtAddress
		{
			get
			{
				return this._dtAddress.Entity;
			}
			set
			{
				dtAddress previousValue = this._dtAddress.Entity;
				if (((previousValue != value) 
							|| (this._dtAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtAddress.Entity = null;
						previousValue.dtAddressPersonRelationShips.Remove(this);
					}
					this._dtAddress.Entity = value;
					if ((value != null))
					{
						value.dtAddressPersonRelationShips.Add(this);
						this._AddressID = value.aID;
					}
					else
					{
						this._AddressID = default(int);
					}
					this.SendPropertyChanged("dtAddress");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPerson_dtAddressPersonRelationShip", Storage="_dtPerson", ThisKey="PersonID", OtherKey="pID", IsForeignKey=true)]
		public dtPerson dtPerson
		{
			get
			{
				return this._dtPerson.Entity;
			}
			set
			{
				dtPerson previousValue = this._dtPerson.Entity;
				if (((previousValue != value) 
							|| (this._dtPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtPerson.Entity = null;
						previousValue.dtAddressPersonRelationShips.Remove(this);
					}
					this._dtPerson.Entity = value;
					if ((value != null))
					{
						value.dtAddressPersonRelationShips.Add(this);
						this._PersonID = value.pID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("dtPerson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtCategory")]
	public partial class dtCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatID;
		
		private string _Description;
		
		private string _Title;
		
		private EntitySet<dtStock> _dtStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public dtCategory()
		{
			this._dtStocks = new EntitySet<dtStock>(new Action<dtStock>(this.attach_dtStocks), new Action<dtStock>(this.detach_dtStocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtCategory_dtStock", Storage="_dtStocks", ThisKey="CatID", OtherKey="CategoryID")]
		public EntitySet<dtStock> dtStocks
		{
			get
			{
				return this._dtStocks;
			}
			set
			{
				this._dtStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtCategory = this;
		}
		
		private void detach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtConfig")]
	public partial class dtConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private string _ConfigType;
		
		private string _ConfigCode;
		
		private string _ConfigDescription;
		
		private string _ConfigValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnConfigTypeChanging(string value);
    partial void OnConfigTypeChanged();
    partial void OnConfigCodeChanging(string value);
    partial void OnConfigCodeChanged();
    partial void OnConfigDescriptionChanging(string value);
    partial void OnConfigDescriptionChanged();
    partial void OnConfigValueChanging(string value);
    partial void OnConfigValueChanged();
    #endregion
		
		public dtConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ConfigType
		{
			get
			{
				return this._ConfigType;
			}
			set
			{
				if ((this._ConfigType != value))
				{
					this.OnConfigTypeChanging(value);
					this.SendPropertyChanging();
					this._ConfigType = value;
					this.SendPropertyChanged("ConfigType");
					this.OnConfigTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ConfigCode
		{
			get
			{
				return this._ConfigCode;
			}
			set
			{
				if ((this._ConfigCode != value))
				{
					this.OnConfigCodeChanging(value);
					this.SendPropertyChanging();
					this._ConfigCode = value;
					this.SendPropertyChanged("ConfigCode");
					this.OnConfigCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigDescription", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ConfigDescription
		{
			get
			{
				return this._ConfigDescription;
			}
			set
			{
				if ((this._ConfigDescription != value))
				{
					this.OnConfigDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ConfigDescription = value;
					this.SendPropertyChanged("ConfigDescription");
					this.OnConfigDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ConfigValue
		{
			get
			{
				return this._ConfigValue;
			}
			set
			{
				if ((this._ConfigValue != value))
				{
					this.OnConfigValueChanging(value);
					this.SendPropertyChanging();
					this._ConfigValue = value;
					this.SendPropertyChanged("ConfigValue");
					this.OnConfigValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtPerson")]
	public partial class dtPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pID;
		
		private string _FirstName;
		
		private string _SureName;
		
		private string _Email;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _EbayName;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<dtAddressPersonRelationShip> _dtAddressPersonRelationShips;
		
		private EntitySet<dtSale> _dtSales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpIDChanging(int value);
    partial void OnpIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSureNameChanging(string value);
    partial void OnSureNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnEbayNameChanging(string value);
    partial void OnEbayNameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public dtPerson()
		{
			this._dtAddressPersonRelationShips = new EntitySet<dtAddressPersonRelationShip>(new Action<dtAddressPersonRelationShip>(this.attach_dtAddressPersonRelationShips), new Action<dtAddressPersonRelationShip>(this.detach_dtAddressPersonRelationShips));
			this._dtSales = new EntitySet<dtSale>(new Action<dtSale>(this.attach_dtSales), new Action<dtSale>(this.detach_dtSales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pID
		{
			get
			{
				return this._pID;
			}
			set
			{
				if ((this._pID != value))
				{
					this.OnpIDChanging(value);
					this.SendPropertyChanging();
					this._pID = value;
					this.SendPropertyChanged("pID");
					this.OnpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SureName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SureName
		{
			get
			{
				return this._SureName;
			}
			set
			{
				if ((this._SureName != value))
				{
					this.OnSureNameChanging(value);
					this.SendPropertyChanging();
					this._SureName = value;
					this.SendPropertyChanged("SureName");
					this.OnSureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="NVarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EbayName", DbType="NVarChar(50)")]
		public string EbayName
		{
			get
			{
				return this._EbayName;
			}
			set
			{
				if ((this._EbayName != value))
				{
					this.OnEbayNameChanging(value);
					this.SendPropertyChanging();
					this._EbayName = value;
					this.SendPropertyChanged("EbayName");
					this.OnEbayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPerson_dtAddressPersonRelationShip", Storage="_dtAddressPersonRelationShips", ThisKey="pID", OtherKey="PersonID")]
		public EntitySet<dtAddressPersonRelationShip> dtAddressPersonRelationShips
		{
			get
			{
				return this._dtAddressPersonRelationShips;
			}
			set
			{
				this._dtAddressPersonRelationShips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPerson_dtSale", Storage="_dtSales", ThisKey="pID", OtherKey="PersonID")]
		public EntitySet<dtSale> dtSales
		{
			get
			{
				return this._dtSales;
			}
			set
			{
				this._dtSales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtAddressPersonRelationShips(dtAddressPersonRelationShip entity)
		{
			this.SendPropertyChanging();
			entity.dtPerson = this;
		}
		
		private void detach_dtAddressPersonRelationShips(dtAddressPersonRelationShip entity)
		{
			this.SendPropertyChanging();
			entity.dtPerson = null;
		}
		
		private void attach_dtSales(dtSale entity)
		{
			this.SendPropertyChanging();
			entity.dtPerson = this;
		}
		
		private void detach_dtSales(dtSale entity)
		{
			this.SendPropertyChanging();
			entity.dtPerson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtPurchese")]
	public partial class dtPurchese : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pID;
		
		private string _ItemTitle;
		
		private string _ItemDescription;
		
		private System.Nullable<decimal> _PurchesedValue;
		
		private System.Nullable<decimal> _ShippingCosts;
		
		private System.Nullable<int> _VendorID;
		
		private string _InvoiceID;
		
		private System.Nullable<System.DateTime> _Purchesed_Date;
		
		private System.Nullable<int> _AddedBy;
		
		private string _PayPalTransactionID;
		
		private System.Nullable<bool> _IsExpense;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<dtTransactionLedger> _dtTransactionLedgers;
		
		private EntitySet<dtStock> _dtStocks;
		
		private EntityRef<dtVendor> _dtVendor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpIDChanging(int value);
    partial void OnpIDChanged();
    partial void OnItemTitleChanging(string value);
    partial void OnItemTitleChanged();
    partial void OnItemDescriptionChanging(string value);
    partial void OnItemDescriptionChanged();
    partial void OnPurchesedValueChanging(System.Nullable<decimal> value);
    partial void OnPurchesedValueChanged();
    partial void OnShippingCostsChanging(System.Nullable<decimal> value);
    partial void OnShippingCostsChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnInvoiceIDChanging(string value);
    partial void OnInvoiceIDChanged();
    partial void OnPurchesed_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPurchesed_DateChanged();
    partial void OnAddedByChanging(System.Nullable<int> value);
    partial void OnAddedByChanged();
    partial void OnPayPalTransactionIDChanging(string value);
    partial void OnPayPalTransactionIDChanged();
    partial void OnIsExpenseChanging(System.Nullable<bool> value);
    partial void OnIsExpenseChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public dtPurchese()
		{
			this._dtTransactionLedgers = new EntitySet<dtTransactionLedger>(new Action<dtTransactionLedger>(this.attach_dtTransactionLedgers), new Action<dtTransactionLedger>(this.detach_dtTransactionLedgers));
			this._dtStocks = new EntitySet<dtStock>(new Action<dtStock>(this.attach_dtStocks), new Action<dtStock>(this.detach_dtStocks));
			this._dtVendor = default(EntityRef<dtVendor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pID
		{
			get
			{
				return this._pID;
			}
			set
			{
				if ((this._pID != value))
				{
					this.OnpIDChanging(value);
					this.SendPropertyChanging();
					this._pID = value;
					this.SendPropertyChanged("pID");
					this.OnpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTitle", DbType="NVarChar(50)")]
		public string ItemTitle
		{
			get
			{
				return this._ItemTitle;
			}
			set
			{
				if ((this._ItemTitle != value))
				{
					this.OnItemTitleChanging(value);
					this.SendPropertyChanging();
					this._ItemTitle = value;
					this.SendPropertyChanged("ItemTitle");
					this.OnItemTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDescription", DbType="NVarChar(250)")]
		public string ItemDescription
		{
			get
			{
				return this._ItemDescription;
			}
			set
			{
				if ((this._ItemDescription != value))
				{
					this.OnItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ItemDescription = value;
					this.SendPropertyChanged("ItemDescription");
					this.OnItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchesedValue", DbType="Money")]
		public System.Nullable<decimal> PurchesedValue
		{
			get
			{
				return this._PurchesedValue;
			}
			set
			{
				if ((this._PurchesedValue != value))
				{
					this.OnPurchesedValueChanging(value);
					this.SendPropertyChanging();
					this._PurchesedValue = value;
					this.SendPropertyChanged("PurchesedValue");
					this.OnPurchesedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingCosts", DbType="Money")]
		public System.Nullable<decimal> ShippingCosts
		{
			get
			{
				return this._ShippingCosts;
			}
			set
			{
				if ((this._ShippingCosts != value))
				{
					this.OnShippingCostsChanging(value);
					this.SendPropertyChanging();
					this._ShippingCosts = value;
					this.SendPropertyChanged("ShippingCosts");
					this.OnShippingCostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._dtVendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="NVarChar(50)")]
		public string InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Purchesed Date]", Storage="_Purchesed_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Purchesed_Date
		{
			get
			{
				return this._Purchesed_Date;
			}
			set
			{
				if ((this._Purchesed_Date != value))
				{
					this.OnPurchesed_DateChanging(value);
					this.SendPropertyChanging();
					this._Purchesed_Date = value;
					this.SendPropertyChanged("Purchesed_Date");
					this.OnPurchesed_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedBy", DbType="Int")]
		public System.Nullable<int> AddedBy
		{
			get
			{
				return this._AddedBy;
			}
			set
			{
				if ((this._AddedBy != value))
				{
					this.OnAddedByChanging(value);
					this.SendPropertyChanging();
					this._AddedBy = value;
					this.SendPropertyChanged("AddedBy");
					this.OnAddedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPalTransactionID", DbType="NVarChar(50)")]
		public string PayPalTransactionID
		{
			get
			{
				return this._PayPalTransactionID;
			}
			set
			{
				if ((this._PayPalTransactionID != value))
				{
					this.OnPayPalTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._PayPalTransactionID = value;
					this.SendPropertyChanged("PayPalTransactionID");
					this.OnPayPalTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExpense", DbType="Bit")]
		public System.Nullable<bool> IsExpense
		{
			get
			{
				return this._IsExpense;
			}
			set
			{
				if ((this._IsExpense != value))
				{
					this.OnIsExpenseChanging(value);
					this.SendPropertyChanging();
					this._IsExpense = value;
					this.SendPropertyChanged("IsExpense");
					this.OnIsExpenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPurchese_dtTransactionLedger", Storage="_dtTransactionLedgers", ThisKey="pID", OtherKey="PurchaseID")]
		public EntitySet<dtTransactionLedger> dtTransactionLedgers
		{
			get
			{
				return this._dtTransactionLedgers;
			}
			set
			{
				this._dtTransactionLedgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPurchese_dtStock", Storage="_dtStocks", ThisKey="pID", OtherKey="PurchaseID")]
		public EntitySet<dtStock> dtStocks
		{
			get
			{
				return this._dtStocks;
			}
			set
			{
				this._dtStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtVendor_dtPurchese", Storage="_dtVendor", ThisKey="VendorID", OtherKey="vID", IsForeignKey=true)]
		public dtVendor dtVendor
		{
			get
			{
				return this._dtVendor.Entity;
			}
			set
			{
				dtVendor previousValue = this._dtVendor.Entity;
				if (((previousValue != value) 
							|| (this._dtVendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtVendor.Entity = null;
						previousValue.dtPurcheses.Remove(this);
					}
					this._dtVendor.Entity = value;
					if ((value != null))
					{
						value.dtPurcheses.Add(this);
						this._VendorID = value.vID;
					}
					else
					{
						this._VendorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtVendor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtPurchese = this;
		}
		
		private void detach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtPurchese = null;
		}
		
		private void attach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtPurchese = this;
		}
		
		private void detach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtPurchese = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtRefund")]
	public partial class dtRefund : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rID;
		
		private decimal _Amount;
		
		private string _Reason;
		
		private System.Nullable<decimal> _Postage;
		
		private System.Nullable<int> _StockID;
		
		private System.DateTime _Refunded;
		
		private int _RefundedBy;
		
		private string _PayPalTransactionID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private EntitySet<dtTransactionLedger> _dtTransactionLedgers;
		
		private EntityRef<dtUser> _dtUser;
		
		private EntityRef<dtStock> _dtStock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrIDChanging(int value);
    partial void OnrIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnPostageChanging(System.Nullable<decimal> value);
    partial void OnPostageChanged();
    partial void OnStockIDChanging(System.Nullable<int> value);
    partial void OnStockIDChanged();
    partial void OnRefundedChanging(System.DateTime value);
    partial void OnRefundedChanged();
    partial void OnRefundedByChanging(int value);
    partial void OnRefundedByChanged();
    partial void OnPayPalTransactionIDChanging(string value);
    partial void OnPayPalTransactionIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    #endregion
		
		public dtRefund()
		{
			this._dtTransactionLedgers = new EntitySet<dtTransactionLedger>(new Action<dtTransactionLedger>(this.attach_dtTransactionLedgers), new Action<dtTransactionLedger>(this.detach_dtTransactionLedgers));
			this._dtUser = default(EntityRef<dtUser>);
			this._dtStock = default(EntityRef<dtStock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rID
		{
			get
			{
				return this._rID;
			}
			set
			{
				if ((this._rID != value))
				{
					this.OnrIDChanging(value);
					this.SendPropertyChanging();
					this._rID = value;
					this.SendPropertyChanged("rID");
					this.OnrIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Postage", DbType="Money")]
		public System.Nullable<decimal> Postage
		{
			get
			{
				return this._Postage;
			}
			set
			{
				if ((this._Postage != value))
				{
					this.OnPostageChanging(value);
					this.SendPropertyChanging();
					this._Postage = value;
					this.SendPropertyChanged("Postage");
					this.OnPostageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int")]
		public System.Nullable<int> StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._dtStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refunded", DbType="DateTime NOT NULL")]
		public System.DateTime Refunded
		{
			get
			{
				return this._Refunded;
			}
			set
			{
				if ((this._Refunded != value))
				{
					this.OnRefundedChanging(value);
					this.SendPropertyChanging();
					this._Refunded = value;
					this.SendPropertyChanged("Refunded");
					this.OnRefundedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundedBy", DbType="Int NOT NULL")]
		public int RefundedBy
		{
			get
			{
				return this._RefundedBy;
			}
			set
			{
				if ((this._RefundedBy != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefundedByChanging(value);
					this.SendPropertyChanging();
					this._RefundedBy = value;
					this.SendPropertyChanged("RefundedBy");
					this.OnRefundedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPalTransactionID", DbType="NVarChar(50)")]
		public string PayPalTransactionID
		{
			get
			{
				return this._PayPalTransactionID;
			}
			set
			{
				if ((this._PayPalTransactionID != value))
				{
					this.OnPayPalTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._PayPalTransactionID = value;
					this.SendPropertyChanged("PayPalTransactionID");
					this.OnPayPalTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtRefund_dtTransactionLedger", Storage="_dtTransactionLedgers", ThisKey="rID", OtherKey="RefundID")]
		public EntitySet<dtTransactionLedger> dtTransactionLedgers
		{
			get
			{
				return this._dtTransactionLedgers;
			}
			set
			{
				this._dtTransactionLedgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtRefund", Storage="_dtUser", ThisKey="RefundedBy", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtRefunds.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtRefunds.Add(this);
						this._RefundedBy = value.uID;
					}
					else
					{
						this._RefundedBy = default(int);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtRefund", Storage="_dtStock", ThisKey="StockID", OtherKey="sID", IsForeignKey=true)]
		public dtStock dtStock
		{
			get
			{
				return this._dtStock.Entity;
			}
			set
			{
				dtStock previousValue = this._dtStock.Entity;
				if (((previousValue != value) 
							|| (this._dtStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtStock.Entity = null;
						previousValue.dtRefunds.Remove(this);
					}
					this._dtStock.Entity = value;
					if ((value != null))
					{
						value.dtRefunds.Add(this);
						this._StockID = value.sID;
					}
					else
					{
						this._StockID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtStock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtRefund = this;
		}
		
		private void detach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtRefund = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtSale")]
	public partial class dtSale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<decimal> _SoldValue;
		
		private System.Nullable<decimal> _PandP;
		
		private System.Nullable<decimal> _EbayFees;
		
		private System.Nullable<decimal> _PaypayFees;
		
		private System.Nullable<decimal> _ExtraFee1;
		
		private System.Nullable<decimal> _ExtraFee2;
		
		private System.Nullable<System.DateTime> _SoldDate;
		
		private string _SaleMethod;
		
		private System.Nullable<int> _SoldBy;
		
		private System.Nullable<int> _PersonID;
		
		private string _PayPalTransactionID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private EntitySet<dtTransactionLedger> _dtTransactionLedgers;
		
		private EntitySet<dtStock> _dtStocks;
		
		private EntityRef<dtPerson> _dtPerson;
		
		private EntityRef<dtUser> _dtUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntIDChanging(int value);
    partial void OntIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSoldValueChanging(System.Nullable<decimal> value);
    partial void OnSoldValueChanged();
    partial void OnPandPChanging(System.Nullable<decimal> value);
    partial void OnPandPChanged();
    partial void OnEbayFeesChanging(System.Nullable<decimal> value);
    partial void OnEbayFeesChanged();
    partial void OnPaypayFeesChanging(System.Nullable<decimal> value);
    partial void OnPaypayFeesChanged();
    partial void OnExtraFee1Changing(System.Nullable<decimal> value);
    partial void OnExtraFee1Changed();
    partial void OnExtraFee2Changing(System.Nullable<decimal> value);
    partial void OnExtraFee2Changed();
    partial void OnSoldDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSoldDateChanged();
    partial void OnSaleMethodChanging(string value);
    partial void OnSaleMethodChanged();
    partial void OnSoldByChanging(System.Nullable<int> value);
    partial void OnSoldByChanged();
    partial void OnPersonIDChanging(System.Nullable<int> value);
    partial void OnPersonIDChanged();
    partial void OnPayPalTransactionIDChanging(string value);
    partial void OnPayPalTransactionIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    #endregion
		
		public dtSale()
		{
			this._dtTransactionLedgers = new EntitySet<dtTransactionLedger>(new Action<dtTransactionLedger>(this.attach_dtTransactionLedgers), new Action<dtTransactionLedger>(this.detach_dtTransactionLedgers));
			this._dtStocks = new EntitySet<dtStock>(new Action<dtStock>(this.attach_dtStocks), new Action<dtStock>(this.detach_dtStocks));
			this._dtPerson = default(EntityRef<dtPerson>);
			this._dtUser = default(EntityRef<dtUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tID
		{
			get
			{
				return this._tID;
			}
			set
			{
				if ((this._tID != value))
				{
					this.OntIDChanging(value);
					this.SendPropertyChanging();
					this._tID = value;
					this.SendPropertyChanged("tID");
					this.OntIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldValue", DbType="Money")]
		public System.Nullable<decimal> SoldValue
		{
			get
			{
				return this._SoldValue;
			}
			set
			{
				if ((this._SoldValue != value))
				{
					this.OnSoldValueChanging(value);
					this.SendPropertyChanging();
					this._SoldValue = value;
					this.SendPropertyChanged("SoldValue");
					this.OnSoldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PandP", DbType="Money")]
		public System.Nullable<decimal> PandP
		{
			get
			{
				return this._PandP;
			}
			set
			{
				if ((this._PandP != value))
				{
					this.OnPandPChanging(value);
					this.SendPropertyChanging();
					this._PandP = value;
					this.SendPropertyChanged("PandP");
					this.OnPandPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EbayFees", DbType="Money")]
		public System.Nullable<decimal> EbayFees
		{
			get
			{
				return this._EbayFees;
			}
			set
			{
				if ((this._EbayFees != value))
				{
					this.OnEbayFeesChanging(value);
					this.SendPropertyChanging();
					this._EbayFees = value;
					this.SendPropertyChanged("EbayFees");
					this.OnEbayFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaypayFees", DbType="Money")]
		public System.Nullable<decimal> PaypayFees
		{
			get
			{
				return this._PaypayFees;
			}
			set
			{
				if ((this._PaypayFees != value))
				{
					this.OnPaypayFeesChanging(value);
					this.SendPropertyChanging();
					this._PaypayFees = value;
					this.SendPropertyChanged("PaypayFees");
					this.OnPaypayFeesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraFee1", DbType="Money")]
		public System.Nullable<decimal> ExtraFee1
		{
			get
			{
				return this._ExtraFee1;
			}
			set
			{
				if ((this._ExtraFee1 != value))
				{
					this.OnExtraFee1Changing(value);
					this.SendPropertyChanging();
					this._ExtraFee1 = value;
					this.SendPropertyChanged("ExtraFee1");
					this.OnExtraFee1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraFee2", DbType="Money")]
		public System.Nullable<decimal> ExtraFee2
		{
			get
			{
				return this._ExtraFee2;
			}
			set
			{
				if ((this._ExtraFee2 != value))
				{
					this.OnExtraFee2Changing(value);
					this.SendPropertyChanging();
					this._ExtraFee2 = value;
					this.SendPropertyChanged("ExtraFee2");
					this.OnExtraFee2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldDate", DbType="Date")]
		public System.Nullable<System.DateTime> SoldDate
		{
			get
			{
				return this._SoldDate;
			}
			set
			{
				if ((this._SoldDate != value))
				{
					this.OnSoldDateChanging(value);
					this.SendPropertyChanging();
					this._SoldDate = value;
					this.SendPropertyChanged("SoldDate");
					this.OnSoldDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleMethod", DbType="NVarChar(150)")]
		public string SaleMethod
		{
			get
			{
				return this._SaleMethod;
			}
			set
			{
				if ((this._SaleMethod != value))
				{
					this.OnSaleMethodChanging(value);
					this.SendPropertyChanging();
					this._SaleMethod = value;
					this.SendPropertyChanged("SaleMethod");
					this.OnSaleMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldBy", DbType="Int")]
		public System.Nullable<int> SoldBy
		{
			get
			{
				return this._SoldBy;
			}
			set
			{
				if ((this._SoldBy != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoldByChanging(value);
					this.SendPropertyChanging();
					this._SoldBy = value;
					this.SendPropertyChanged("SoldBy");
					this.OnSoldByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int")]
		public System.Nullable<int> PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._dtPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPalTransactionID", DbType="NVarChar(50)")]
		public string PayPalTransactionID
		{
			get
			{
				return this._PayPalTransactionID;
			}
			set
			{
				if ((this._PayPalTransactionID != value))
				{
					this.OnPayPalTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._PayPalTransactionID = value;
					this.SendPropertyChanged("PayPalTransactionID");
					this.OnPayPalTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtSale_dtTransactionLedger", Storage="_dtTransactionLedgers", ThisKey="tID", OtherKey="SaleID")]
		public EntitySet<dtTransactionLedger> dtTransactionLedgers
		{
			get
			{
				return this._dtTransactionLedgers;
			}
			set
			{
				this._dtTransactionLedgers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtSale_dtStock", Storage="_dtStocks", ThisKey="tID", OtherKey="SaleID")]
		public EntitySet<dtStock> dtStocks
		{
			get
			{
				return this._dtStocks;
			}
			set
			{
				this._dtStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPerson_dtSale", Storage="_dtPerson", ThisKey="PersonID", OtherKey="pID", IsForeignKey=true)]
		public dtPerson dtPerson
		{
			get
			{
				return this._dtPerson.Entity;
			}
			set
			{
				dtPerson previousValue = this._dtPerson.Entity;
				if (((previousValue != value) 
							|| (this._dtPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtPerson.Entity = null;
						previousValue.dtSales.Remove(this);
					}
					this._dtPerson.Entity = value;
					if ((value != null))
					{
						value.dtSales.Add(this);
						this._PersonID = value.pID;
					}
					else
					{
						this._PersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtPerson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtSale", Storage="_dtUser", ThisKey="SoldBy", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtSales.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtSales.Add(this);
						this._SoldBy = value.uID;
					}
					else
					{
						this._SoldBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtSale = this;
		}
		
		private void detach_dtTransactionLedgers(dtTransactionLedger entity)
		{
			this.SendPropertyChanging();
			entity.dtSale = null;
		}
		
		private void attach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtSale = this;
		}
		
		private void detach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtSale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtSettingLookup")]
	public partial class dtSettingLookup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sID;
		
		private string _Code;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsIDChanging(int value);
    partial void OnsIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public dtSettingLookup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sID
		{
			get
			{
				return this._sID;
			}
			set
			{
				if ((this._sID != value))
				{
					this.OnsIDChanging(value);
					this.SendPropertyChanging();
					this._sID = value;
					this.SendPropertyChanged("sID");
					this.OnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtStockDetail")]
	public partial class dtStockDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SdID;
		
		private int _StockID;
		
		private System.Nullable<decimal> _PurchaseValue;
		
		private System.Nullable<decimal> _SaleValue;
		
		private EntityRef<dtStock> _dtStock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSdIDChanging(int value);
    partial void OnSdIDChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnPurchaseValueChanging(System.Nullable<decimal> value);
    partial void OnPurchaseValueChanged();
    partial void OnSaleValueChanging(System.Nullable<decimal> value);
    partial void OnSaleValueChanged();
    #endregion
		
		public dtStockDetail()
		{
			this._dtStock = default(EntityRef<dtStock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SdID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SdID
		{
			get
			{
				return this._SdID;
			}
			set
			{
				if ((this._SdID != value))
				{
					this.OnSdIDChanging(value);
					this.SendPropertyChanging();
					this._SdID = value;
					this.SendPropertyChanged("SdID");
					this.OnSdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL")]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._dtStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseValue", DbType="Money")]
		public System.Nullable<decimal> PurchaseValue
		{
			get
			{
				return this._PurchaseValue;
			}
			set
			{
				if ((this._PurchaseValue != value))
				{
					this.OnPurchaseValueChanging(value);
					this.SendPropertyChanging();
					this._PurchaseValue = value;
					this.SendPropertyChanged("PurchaseValue");
					this.OnPurchaseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleValue", DbType="Money")]
		public System.Nullable<decimal> SaleValue
		{
			get
			{
				return this._SaleValue;
			}
			set
			{
				if ((this._SaleValue != value))
				{
					this.OnSaleValueChanging(value);
					this.SendPropertyChanging();
					this._SaleValue = value;
					this.SendPropertyChanged("SaleValue");
					this.OnSaleValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtStockDetail", Storage="_dtStock", ThisKey="StockID", OtherKey="sID", IsForeignKey=true)]
		public dtStock dtStock
		{
			get
			{
				return this._dtStock.Entity;
			}
			set
			{
				dtStock previousValue = this._dtStock.Entity;
				if (((previousValue != value) 
							|| (this._dtStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtStock.Entity = null;
						previousValue.dtStockDetails.Remove(this);
					}
					this._dtStock.Entity = value;
					if ((value != null))
					{
						value.dtStockDetails.Add(this);
						this._StockID = value.sID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("dtStock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtStockHistory")]
	public partial class dtStockHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ssID;
		
		private System.Nullable<int> _StoockID;
		
		private string _Status;
		
		private System.Nullable<decimal> _Value;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _StatusID;
		
		private EntityRef<dtUser> _dtUser;
		
		private EntityRef<dtStock> _dtStock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnssIDChanging(int value);
    partial void OnssIDChanged();
    partial void OnStoockIDChanging(System.Nullable<int> value);
    partial void OnStoockIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public dtStockHistory()
		{
			this._dtUser = default(EntityRef<dtUser>);
			this._dtStock = default(EntityRef<dtStock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ssID
		{
			get
			{
				return this._ssID;
			}
			set
			{
				if ((this._ssID != value))
				{
					this.OnssIDChanging(value);
					this.SendPropertyChanging();
					this._ssID = value;
					this.SendPropertyChanged("ssID");
					this.OnssIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoockID", DbType="Int")]
		public System.Nullable<int> StoockID
		{
			get
			{
				return this._StoockID;
			}
			set
			{
				if ((this._StoockID != value))
				{
					if (this._dtStock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoockIDChanging(value);
					this.SendPropertyChanging();
					this._StoockID = value;
					this.SendPropertyChanged("StoockID");
					this.OnStoockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(150)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Money")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtStockHistory", Storage="_dtUser", ThisKey="UserID", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtStockHistories.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtStockHistories.Add(this);
						this._UserID = value.uID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtStockHistory", Storage="_dtStock", ThisKey="StoockID", OtherKey="sID", IsForeignKey=true)]
		public dtStock dtStock
		{
			get
			{
				return this._dtStock.Entity;
			}
			set
			{
				dtStock previousValue = this._dtStock.Entity;
				if (((previousValue != value) 
							|| (this._dtStock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtStock.Entity = null;
						previousValue.dtStockHistories.Remove(this);
					}
					this._dtStock.Entity = value;
					if ((value != null))
					{
						value.dtStockHistories.Add(this);
						this._StoockID = value.sID;
					}
					else
					{
						this._StoockID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtStock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtTheme")]
	public partial class dtTheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _thID;
		
		private string _Name;
		
		private string _Description;
		
		private string _ThemXML;
		
		private EntitySet<dtUser> _dtUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnthIDChanging(int value);
    partial void OnthIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnThemXMLChanging(string value);
    partial void OnThemXMLChanged();
    #endregion
		
		public dtTheme()
		{
			this._dtUsers = new EntitySet<dtUser>(new Action<dtUser>(this.attach_dtUsers), new Action<dtUser>(this.detach_dtUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int thID
		{
			get
			{
				return this._thID;
			}
			set
			{
				if ((this._thID != value))
				{
					this.OnthIDChanging(value);
					this.SendPropertyChanging();
					this._thID = value;
					this.SendPropertyChanged("thID");
					this.OnthIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemXML", DbType="NVarChar(MAX)")]
		public string ThemXML
		{
			get
			{
				return this._ThemXML;
			}
			set
			{
				if ((this._ThemXML != value))
				{
					this.OnThemXMLChanging(value);
					this.SendPropertyChanging();
					this._ThemXML = value;
					this.SendPropertyChanged("ThemXML");
					this.OnThemXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtTheme_dtUser", Storage="_dtUsers", ThisKey="thID", OtherKey="ThemeID")]
		public EntitySet<dtUser> dtUsers
		{
			get
			{
				return this._dtUsers;
			}
			set
			{
				this._dtUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtUsers(dtUser entity)
		{
			this.SendPropertyChanging();
			entity.dtTheme = this;
		}
		
		private void detach_dtUsers(dtUser entity)
		{
			this.SendPropertyChanging();
			entity.dtTheme = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtTransactionLedger")]
	public partial class dtTransactionLedger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tranID;
		
		private System.Nullable<int> _SaleID;
		
		private System.Nullable<int> _RefundID;
		
		private System.Nullable<int> _PurchaseID;
		
		private string _TransactionType;
		
		private decimal _TotelAmount;
		
		private System.DateTime _TransactionDateTime;
		
		private EntityRef<dtPurchese> _dtPurchese;
		
		private EntityRef<dtRefund> _dtRefund;
		
		private EntityRef<dtSale> _dtSale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntranIDChanging(int value);
    partial void OntranIDChanged();
    partial void OnSaleIDChanging(System.Nullable<int> value);
    partial void OnSaleIDChanged();
    partial void OnRefundIDChanging(System.Nullable<int> value);
    partial void OnRefundIDChanged();
    partial void OnPurchaseIDChanging(System.Nullable<int> value);
    partial void OnPurchaseIDChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnTotelAmountChanging(decimal value);
    partial void OnTotelAmountChanged();
    partial void OnTransactionDateTimeChanging(System.DateTime value);
    partial void OnTransactionDateTimeChanged();
    #endregion
		
		public dtTransactionLedger()
		{
			this._dtPurchese = default(EntityRef<dtPurchese>);
			this._dtRefund = default(EntityRef<dtRefund>);
			this._dtSale = default(EntityRef<dtSale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tranID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tranID
		{
			get
			{
				return this._tranID;
			}
			set
			{
				if ((this._tranID != value))
				{
					this.OntranIDChanging(value);
					this.SendPropertyChanging();
					this._tranID = value;
					this.SendPropertyChanged("tranID");
					this.OntranIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="Int")]
		public System.Nullable<int> SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._dtSale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefundID", DbType="Int")]
		public System.Nullable<int> RefundID
		{
			get
			{
				return this._RefundID;
			}
			set
			{
				if ((this._RefundID != value))
				{
					if (this._dtRefund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefundIDChanging(value);
					this.SendPropertyChanging();
					this._RefundID = value;
					this.SendPropertyChanged("RefundID");
					this.OnRefundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", DbType="Int")]
		public System.Nullable<int> PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					if (this._dtPurchese.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotelAmount", DbType="Money NOT NULL")]
		public decimal TotelAmount
		{
			get
			{
				return this._TotelAmount;
			}
			set
			{
				if ((this._TotelAmount != value))
				{
					this.OnTotelAmountChanging(value);
					this.SendPropertyChanging();
					this._TotelAmount = value;
					this.SendPropertyChanged("TotelAmount");
					this.OnTotelAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDateTime
		{
			get
			{
				return this._TransactionDateTime;
			}
			set
			{
				if ((this._TransactionDateTime != value))
				{
					this.OnTransactionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._TransactionDateTime = value;
					this.SendPropertyChanged("TransactionDateTime");
					this.OnTransactionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPurchese_dtTransactionLedger", Storage="_dtPurchese", ThisKey="PurchaseID", OtherKey="pID", IsForeignKey=true)]
		public dtPurchese dtPurchese
		{
			get
			{
				return this._dtPurchese.Entity;
			}
			set
			{
				dtPurchese previousValue = this._dtPurchese.Entity;
				if (((previousValue != value) 
							|| (this._dtPurchese.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtPurchese.Entity = null;
						previousValue.dtTransactionLedgers.Remove(this);
					}
					this._dtPurchese.Entity = value;
					if ((value != null))
					{
						value.dtTransactionLedgers.Add(this);
						this._PurchaseID = value.pID;
					}
					else
					{
						this._PurchaseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtPurchese");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtRefund_dtTransactionLedger", Storage="_dtRefund", ThisKey="RefundID", OtherKey="rID", IsForeignKey=true)]
		public dtRefund dtRefund
		{
			get
			{
				return this._dtRefund.Entity;
			}
			set
			{
				dtRefund previousValue = this._dtRefund.Entity;
				if (((previousValue != value) 
							|| (this._dtRefund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtRefund.Entity = null;
						previousValue.dtTransactionLedgers.Remove(this);
					}
					this._dtRefund.Entity = value;
					if ((value != null))
					{
						value.dtTransactionLedgers.Add(this);
						this._RefundID = value.rID;
					}
					else
					{
						this._RefundID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtRefund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtSale_dtTransactionLedger", Storage="_dtSale", ThisKey="SaleID", OtherKey="tID", IsForeignKey=true)]
		public dtSale dtSale
		{
			get
			{
				return this._dtSale.Entity;
			}
			set
			{
				dtSale previousValue = this._dtSale.Entity;
				if (((previousValue != value) 
							|| (this._dtSale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtSale.Entity = null;
						previousValue.dtTransactionLedgers.Remove(this);
					}
					this._dtSale.Entity = value;
					if ((value != null))
					{
						value.dtTransactionLedgers.Add(this);
						this._SaleID = value.tID;
					}
					else
					{
						this._SaleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtSale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtUser")]
	public partial class dtUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _uID;
		
		private string _UserName;
		
		private string _PassWord;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<bool> _IsAdmin;
		
		private System.Nullable<int> _ThemeID;
		
		private EntitySet<dtRefund> _dtRefunds;
		
		private EntitySet<dtSale> _dtSales;
		
		private EntitySet<dtStockHistory> _dtStockHistories;
		
		private EntitySet<dtUserDetail> _dtUserDetails;
		
		private EntitySet<dtUserPreferance> _dtUserPreferances;
		
		private EntitySet<dtStock> _dtStocks;
		
		private EntitySet<dtNotification> _dtNotifications;
		
		private EntityRef<dtTheme> _dtTheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuIDChanging(int value);
    partial void OnuIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnIsAdminChanging(System.Nullable<bool> value);
    partial void OnIsAdminChanged();
    partial void OnThemeIDChanging(System.Nullable<int> value);
    partial void OnThemeIDChanged();
    #endregion
		
		public dtUser()
		{
			this._dtRefunds = new EntitySet<dtRefund>(new Action<dtRefund>(this.attach_dtRefunds), new Action<dtRefund>(this.detach_dtRefunds));
			this._dtSales = new EntitySet<dtSale>(new Action<dtSale>(this.attach_dtSales), new Action<dtSale>(this.detach_dtSales));
			this._dtStockHistories = new EntitySet<dtStockHistory>(new Action<dtStockHistory>(this.attach_dtStockHistories), new Action<dtStockHistory>(this.detach_dtStockHistories));
			this._dtUserDetails = new EntitySet<dtUserDetail>(new Action<dtUserDetail>(this.attach_dtUserDetails), new Action<dtUserDetail>(this.detach_dtUserDetails));
			this._dtUserPreferances = new EntitySet<dtUserPreferance>(new Action<dtUserPreferance>(this.attach_dtUserPreferances), new Action<dtUserPreferance>(this.detach_dtUserPreferances));
			this._dtStocks = new EntitySet<dtStock>(new Action<dtStock>(this.attach_dtStocks), new Action<dtStock>(this.detach_dtStocks));
			this._dtNotifications = new EntitySet<dtNotification>(new Action<dtNotification>(this.attach_dtNotifications), new Action<dtNotification>(this.detach_dtNotifications));
			this._dtTheme = default(EntityRef<dtTheme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int uID
		{
			get
			{
				return this._uID;
			}
			set
			{
				if ((this._uID != value))
				{
					this.OnuIDChanging(value);
					this.SendPropertyChanging();
					this._uID = value;
					this.SendPropertyChanged("uID");
					this.OnuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit")]
		public System.Nullable<bool> IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThemeID", DbType="Int")]
		public System.Nullable<int> ThemeID
		{
			get
			{
				return this._ThemeID;
			}
			set
			{
				if ((this._ThemeID != value))
				{
					if (this._dtTheme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeIDChanging(value);
					this.SendPropertyChanging();
					this._ThemeID = value;
					this.SendPropertyChanged("ThemeID");
					this.OnThemeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtRefund", Storage="_dtRefunds", ThisKey="uID", OtherKey="RefundedBy")]
		public EntitySet<dtRefund> dtRefunds
		{
			get
			{
				return this._dtRefunds;
			}
			set
			{
				this._dtRefunds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtSale", Storage="_dtSales", ThisKey="uID", OtherKey="SoldBy")]
		public EntitySet<dtSale> dtSales
		{
			get
			{
				return this._dtSales;
			}
			set
			{
				this._dtSales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtStockHistory", Storage="_dtStockHistories", ThisKey="uID", OtherKey="UserID")]
		public EntitySet<dtStockHistory> dtStockHistories
		{
			get
			{
				return this._dtStockHistories;
			}
			set
			{
				this._dtStockHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtUserDetail", Storage="_dtUserDetails", ThisKey="uID", OtherKey="UserID")]
		public EntitySet<dtUserDetail> dtUserDetails
		{
			get
			{
				return this._dtUserDetails;
			}
			set
			{
				this._dtUserDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtUserPreferance", Storage="_dtUserPreferances", ThisKey="uID", OtherKey="UserID")]
		public EntitySet<dtUserPreferance> dtUserPreferances
		{
			get
			{
				return this._dtUserPreferances;
			}
			set
			{
				this._dtUserPreferances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtStock", Storage="_dtStocks", ThisKey="uID", OtherKey="CreatedBy")]
		public EntitySet<dtStock> dtStocks
		{
			get
			{
				return this._dtStocks;
			}
			set
			{
				this._dtStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtNotification", Storage="_dtNotifications", ThisKey="uID", OtherKey="RaisedBy")]
		public EntitySet<dtNotification> dtNotifications
		{
			get
			{
				return this._dtNotifications;
			}
			set
			{
				this._dtNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtTheme_dtUser", Storage="_dtTheme", ThisKey="ThemeID", OtherKey="thID", IsForeignKey=true)]
		public dtTheme dtTheme
		{
			get
			{
				return this._dtTheme.Entity;
			}
			set
			{
				dtTheme previousValue = this._dtTheme.Entity;
				if (((previousValue != value) 
							|| (this._dtTheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtTheme.Entity = null;
						previousValue.dtUsers.Remove(this);
					}
					this._dtTheme.Entity = value;
					if ((value != null))
					{
						value.dtUsers.Add(this);
						this._ThemeID = value.thID;
					}
					else
					{
						this._ThemeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtTheme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtRefunds(dtRefund entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtRefunds(dtRefund entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtSales(dtSale entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtSales(dtSale entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtStockHistories(dtStockHistory entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtStockHistories(dtStockHistory entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtUserDetails(dtUserDetail entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtUserDetails(dtUserDetail entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtUserPreferances(dtUserPreferance entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtUserPreferances(dtUserPreferance entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
		
		private void attach_dtNotifications(dtNotification entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = this;
		}
		
		private void detach_dtNotifications(dtNotification entity)
		{
			this.SendPropertyChanging();
			entity.dtUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtUserDetail")]
	public partial class dtUserDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _udID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Initials;
		
		private string _Email;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private EntityRef<dtUser> _dtUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnudIDChanging(int value);
    partial void OnudIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnInitialsChanging(string value);
    partial void OnInitialsChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    #endregion
		
		public dtUserDetail()
		{
			this._dtUser = default(EntityRef<dtUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_udID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int udID
		{
			get
			{
				return this._udID;
			}
			set
			{
				if ((this._udID != value))
				{
					this.OnudIDChanging(value);
					this.SendPropertyChanging();
					this._udID = value;
					this.SendPropertyChanged("udID");
					this.OnudIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(150)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(150)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initials", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Initials
		{
			get
			{
				return this._Initials;
			}
			set
			{
				if ((this._Initials != value))
				{
					this.OnInitialsChanging(value);
					this.SendPropertyChanging();
					this._Initials = value;
					this.SendPropertyChanged("Initials");
					this.OnInitialsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="NVarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtUserDetail", Storage="_dtUser", ThisKey="UserID", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtUserDetails.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtUserDetails.Add(this);
						this._UserID = value.uID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtUserPreferance")]
	public partial class dtUserPreferance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _upID;
		
		private string _Code;
		
		private int _UserID;
		
		private int _PreferenceTypeID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Value;
		
		private EntityRef<dtUser> _dtUser;
		
		private EntityRef<dtUserPreferanceType> _dtUserPreferanceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnupIDChanging(int value);
    partial void OnupIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPreferenceTypeIDChanging(int value);
    partial void OnPreferenceTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public dtUserPreferance()
		{
			this._dtUser = default(EntityRef<dtUser>);
			this._dtUserPreferanceType = default(EntityRef<dtUserPreferanceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_upID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int upID
		{
			get
			{
				return this._upID;
			}
			set
			{
				if ((this._upID != value))
				{
					this.OnupIDChanging(value);
					this.SendPropertyChanging();
					this._upID = value;
					this.SendPropertyChanged("upID");
					this.OnupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceTypeID", DbType="Int NOT NULL")]
		public int PreferenceTypeID
		{
			get
			{
				return this._PreferenceTypeID;
			}
			set
			{
				if ((this._PreferenceTypeID != value))
				{
					if (this._dtUserPreferanceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferenceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PreferenceTypeID = value;
					this.SendPropertyChanged("PreferenceTypeID");
					this.OnPreferenceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtUserPreferance", Storage="_dtUser", ThisKey="UserID", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtUserPreferances.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtUserPreferances.Add(this);
						this._UserID = value.uID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUserPreferanceType_dtUserPreferance", Storage="_dtUserPreferanceType", ThisKey="PreferenceTypeID", OtherKey="preftypeID", IsForeignKey=true)]
		public dtUserPreferanceType dtUserPreferanceType
		{
			get
			{
				return this._dtUserPreferanceType.Entity;
			}
			set
			{
				dtUserPreferanceType previousValue = this._dtUserPreferanceType.Entity;
				if (((previousValue != value) 
							|| (this._dtUserPreferanceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUserPreferanceType.Entity = null;
						previousValue.dtUserPreferances.Remove(this);
					}
					this._dtUserPreferanceType.Entity = value;
					if ((value != null))
					{
						value.dtUserPreferances.Add(this);
						this._PreferenceTypeID = value.preftypeID;
					}
					else
					{
						this._PreferenceTypeID = default(int);
					}
					this.SendPropertyChanged("dtUserPreferanceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtUserPreferanceType")]
	public partial class dtUserPreferanceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _preftypeID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<dtUserPreferance> _dtUserPreferances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpreftypeIDChanging(int value);
    partial void OnpreftypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public dtUserPreferanceType()
		{
			this._dtUserPreferances = new EntitySet<dtUserPreferance>(new Action<dtUserPreferance>(this.attach_dtUserPreferances), new Action<dtUserPreferance>(this.detach_dtUserPreferances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_preftypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int preftypeID
		{
			get
			{
				return this._preftypeID;
			}
			set
			{
				if ((this._preftypeID != value))
				{
					this.OnpreftypeIDChanging(value);
					this.SendPropertyChanging();
					this._preftypeID = value;
					this.SendPropertyChanged("preftypeID");
					this.OnpreftypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUserPreferanceType_dtUserPreferance", Storage="_dtUserPreferances", ThisKey="preftypeID", OtherKey="PreferenceTypeID")]
		public EntitySet<dtUserPreferance> dtUserPreferances
		{
			get
			{
				return this._dtUserPreferances;
			}
			set
			{
				this._dtUserPreferances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtUserPreferances(dtUserPreferance entity)
		{
			this.SendPropertyChanging();
			entity.dtUserPreferanceType = this;
		}
		
		private void detach_dtUserPreferances(dtUserPreferance entity)
		{
			this.SendPropertyChanging();
			entity.dtUserPreferanceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtValueBand")]
	public partial class dtValueBand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ivID;
		
		private System.Nullable<decimal> _LowValue;
		
		private System.Nullable<decimal> _HighValue;
		
		private string _Description;
		
		private EntityRef<dtValueBand> _dtValueBand2;
		
		private EntitySet<dtStock> _dtStocks;
		
		private EntityRef<dtValueBand> _dtValueBand1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnivIDChanging(int value);
    partial void OnivIDChanged();
    partial void OnLowValueChanging(System.Nullable<decimal> value);
    partial void OnLowValueChanged();
    partial void OnHighValueChanging(System.Nullable<decimal> value);
    partial void OnHighValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public dtValueBand()
		{
			this._dtValueBand2 = default(EntityRef<dtValueBand>);
			this._dtStocks = new EntitySet<dtStock>(new Action<dtStock>(this.attach_dtStocks), new Action<dtStock>(this.detach_dtStocks));
			this._dtValueBand1 = default(EntityRef<dtValueBand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ivID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ivID
		{
			get
			{
				return this._ivID;
			}
			set
			{
				if ((this._ivID != value))
				{
					if (this._dtValueBand1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnivIDChanging(value);
					this.SendPropertyChanging();
					this._ivID = value;
					this.SendPropertyChanged("ivID");
					this.OnivIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowValue", DbType="Money")]
		public System.Nullable<decimal> LowValue
		{
			get
			{
				return this._LowValue;
			}
			set
			{
				if ((this._LowValue != value))
				{
					this.OnLowValueChanging(value);
					this.SendPropertyChanging();
					this._LowValue = value;
					this.SendPropertyChanged("LowValue");
					this.OnLowValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighValue", DbType="Money")]
		public System.Nullable<decimal> HighValue
		{
			get
			{
				return this._HighValue;
			}
			set
			{
				if ((this._HighValue != value))
				{
					this.OnHighValueChanging(value);
					this.SendPropertyChanging();
					this._HighValue = value;
					this.SendPropertyChanged("HighValue");
					this.OnHighValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(30)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtValueBand_dtValueBand", Storage="_dtValueBand2", ThisKey="ivID", OtherKey="ivID", IsUnique=true, IsForeignKey=false)]
		public dtValueBand dtValueBand2
		{
			get
			{
				return this._dtValueBand2.Entity;
			}
			set
			{
				dtValueBand previousValue = this._dtValueBand2.Entity;
				if (((previousValue != value) 
							|| (this._dtValueBand2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtValueBand2.Entity = null;
						previousValue.dtValueBand1 = null;
					}
					this._dtValueBand2.Entity = value;
					if ((value != null))
					{
						value.dtValueBand1 = this;
					}
					this.SendPropertyChanged("dtValueBand2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtValueBand_dtStock", Storage="_dtStocks", ThisKey="ivID", OtherKey="ValueBandID")]
		public EntitySet<dtStock> dtStocks
		{
			get
			{
				return this._dtStocks;
			}
			set
			{
				this._dtStocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtValueBand_dtValueBand", Storage="_dtValueBand1", ThisKey="ivID", OtherKey="ivID", IsForeignKey=true)]
		public dtValueBand dtValueBand1
		{
			get
			{
				return this._dtValueBand1.Entity;
			}
			set
			{
				dtValueBand previousValue = this._dtValueBand1.Entity;
				if (((previousValue != value) 
							|| (this._dtValueBand1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtValueBand1.Entity = null;
						previousValue.dtValueBand2 = null;
					}
					this._dtValueBand1.Entity = value;
					if ((value != null))
					{
						value.dtValueBand2 = this;
						this._ivID = value.ivID;
					}
					else
					{
						this._ivID = default(int);
					}
					this.SendPropertyChanged("dtValueBand1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtValueBand = this;
		}
		
		private void detach_dtStocks(dtStock entity)
		{
			this.SendPropertyChanging();
			entity.dtValueBand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtStock")]
	public partial class dtStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sID;
		
		private int _CategoryID;
		
		private string _ItemDesc;
		
		private string _ItemTitle;
		
		private System.Nullable<int> _ValueBandID;
		
		private bool _Sold;
		
		private System.Nullable<int> _Batch;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<int> _SaleID;
		
		private System.Nullable<int> _PurchaseID;
		
		private EntitySet<dtRefund> _dtRefunds;
		
		private EntitySet<dtStockDetail> _dtStockDetails;
		
		private EntitySet<dtStockHistory> _dtStockHistories;
		
		private EntityRef<dtPurchese> _dtPurchese;
		
		private EntityRef<dtSale> _dtSale;
		
		private EntityRef<dtCategory> _dtCategory;
		
		private EntityRef<dtUser> _dtUser;
		
		private EntityRef<dtValueBand> _dtValueBand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsIDChanging(int value);
    partial void OnsIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnItemDescChanging(string value);
    partial void OnItemDescChanged();
    partial void OnItemTitleChanging(string value);
    partial void OnItemTitleChanged();
    partial void OnValueBandIDChanging(System.Nullable<int> value);
    partial void OnValueBandIDChanged();
    partial void OnSoldChanging(bool value);
    partial void OnSoldChanged();
    partial void OnBatchChanging(System.Nullable<int> value);
    partial void OnBatchChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnSaleIDChanging(System.Nullable<int> value);
    partial void OnSaleIDChanged();
    partial void OnPurchaseIDChanging(System.Nullable<int> value);
    partial void OnPurchaseIDChanged();
    #endregion
		
		public dtStock()
		{
			this._dtRefunds = new EntitySet<dtRefund>(new Action<dtRefund>(this.attach_dtRefunds), new Action<dtRefund>(this.detach_dtRefunds));
			this._dtStockDetails = new EntitySet<dtStockDetail>(new Action<dtStockDetail>(this.attach_dtStockDetails), new Action<dtStockDetail>(this.detach_dtStockDetails));
			this._dtStockHistories = new EntitySet<dtStockHistory>(new Action<dtStockHistory>(this.attach_dtStockHistories), new Action<dtStockHistory>(this.detach_dtStockHistories));
			this._dtPurchese = default(EntityRef<dtPurchese>);
			this._dtSale = default(EntityRef<dtSale>);
			this._dtCategory = default(EntityRef<dtCategory>);
			this._dtUser = default(EntityRef<dtUser>);
			this._dtValueBand = default(EntityRef<dtValueBand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sID
		{
			get
			{
				return this._sID;
			}
			set
			{
				if ((this._sID != value))
				{
					this.OnsIDChanging(value);
					this.SendPropertyChanging();
					this._sID = value;
					this.SendPropertyChanged("sID");
					this.OnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._dtCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDesc", DbType="NVarChar(MAX)")]
		public string ItemDesc
		{
			get
			{
				return this._ItemDesc;
			}
			set
			{
				if ((this._ItemDesc != value))
				{
					this.OnItemDescChanging(value);
					this.SendPropertyChanging();
					this._ItemDesc = value;
					this.SendPropertyChanged("ItemDesc");
					this.OnItemDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemTitle", DbType="NVarChar(150)")]
		public string ItemTitle
		{
			get
			{
				return this._ItemTitle;
			}
			set
			{
				if ((this._ItemTitle != value))
				{
					this.OnItemTitleChanging(value);
					this.SendPropertyChanging();
					this._ItemTitle = value;
					this.SendPropertyChanged("ItemTitle");
					this.OnItemTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueBandID", DbType="Int")]
		public System.Nullable<int> ValueBandID
		{
			get
			{
				return this._ValueBandID;
			}
			set
			{
				if ((this._ValueBandID != value))
				{
					if (this._dtValueBand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueBandIDChanging(value);
					this.SendPropertyChanging();
					this._ValueBandID = value;
					this.SendPropertyChanged("ValueBandID");
					this.OnValueBandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sold", DbType="Bit NOT NULL")]
		public bool Sold
		{
			get
			{
				return this._Sold;
			}
			set
			{
				if ((this._Sold != value))
				{
					this.OnSoldChanging(value);
					this.SendPropertyChanging();
					this._Sold = value;
					this.SendPropertyChanged("Sold");
					this.OnSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Batch", DbType="Int")]
		public System.Nullable<int> Batch
		{
			get
			{
				return this._Batch;
			}
			set
			{
				if ((this._Batch != value))
				{
					this.OnBatchChanging(value);
					this.SendPropertyChanging();
					this._Batch = value;
					this.SendPropertyChanged("Batch");
					this.OnBatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleID", DbType="Int")]
		public System.Nullable<int> SaleID
		{
			get
			{
				return this._SaleID;
			}
			set
			{
				if ((this._SaleID != value))
				{
					if (this._dtSale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleIDChanging(value);
					this.SendPropertyChanging();
					this._SaleID = value;
					this.SendPropertyChanged("SaleID");
					this.OnSaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseID", DbType="Int")]
		public System.Nullable<int> PurchaseID
		{
			get
			{
				return this._PurchaseID;
			}
			set
			{
				if ((this._PurchaseID != value))
				{
					if (this._dtPurchese.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseID = value;
					this.SendPropertyChanged("PurchaseID");
					this.OnPurchaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtRefund", Storage="_dtRefunds", ThisKey="sID", OtherKey="StockID")]
		public EntitySet<dtRefund> dtRefunds
		{
			get
			{
				return this._dtRefunds;
			}
			set
			{
				this._dtRefunds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtStockDetail", Storage="_dtStockDetails", ThisKey="sID", OtherKey="StockID")]
		public EntitySet<dtStockDetail> dtStockDetails
		{
			get
			{
				return this._dtStockDetails;
			}
			set
			{
				this._dtStockDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtStock_dtStockHistory", Storage="_dtStockHistories", ThisKey="sID", OtherKey="StoockID")]
		public EntitySet<dtStockHistory> dtStockHistories
		{
			get
			{
				return this._dtStockHistories;
			}
			set
			{
				this._dtStockHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtPurchese_dtStock", Storage="_dtPurchese", ThisKey="PurchaseID", OtherKey="pID", IsForeignKey=true)]
		public dtPurchese dtPurchese
		{
			get
			{
				return this._dtPurchese.Entity;
			}
			set
			{
				dtPurchese previousValue = this._dtPurchese.Entity;
				if (((previousValue != value) 
							|| (this._dtPurchese.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtPurchese.Entity = null;
						previousValue.dtStocks.Remove(this);
					}
					this._dtPurchese.Entity = value;
					if ((value != null))
					{
						value.dtStocks.Add(this);
						this._PurchaseID = value.pID;
					}
					else
					{
						this._PurchaseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtPurchese");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtSale_dtStock", Storage="_dtSale", ThisKey="SaleID", OtherKey="tID", IsForeignKey=true)]
		public dtSale dtSale
		{
			get
			{
				return this._dtSale.Entity;
			}
			set
			{
				dtSale previousValue = this._dtSale.Entity;
				if (((previousValue != value) 
							|| (this._dtSale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtSale.Entity = null;
						previousValue.dtStocks.Remove(this);
					}
					this._dtSale.Entity = value;
					if ((value != null))
					{
						value.dtStocks.Add(this);
						this._SaleID = value.tID;
					}
					else
					{
						this._SaleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtSale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtCategory_dtStock", Storage="_dtCategory", ThisKey="CategoryID", OtherKey="CatID", IsForeignKey=true)]
		public dtCategory dtCategory
		{
			get
			{
				return this._dtCategory.Entity;
			}
			set
			{
				dtCategory previousValue = this._dtCategory.Entity;
				if (((previousValue != value) 
							|| (this._dtCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtCategory.Entity = null;
						previousValue.dtStocks.Remove(this);
					}
					this._dtCategory.Entity = value;
					if ((value != null))
					{
						value.dtStocks.Add(this);
						this._CategoryID = value.CatID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("dtCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtStock", Storage="_dtUser", ThisKey="CreatedBy", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtStocks.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtStocks.Add(this);
						this._CreatedBy = value.uID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtValueBand_dtStock", Storage="_dtValueBand", ThisKey="ValueBandID", OtherKey="ivID", IsForeignKey=true)]
		public dtValueBand dtValueBand
		{
			get
			{
				return this._dtValueBand.Entity;
			}
			set
			{
				dtValueBand previousValue = this._dtValueBand.Entity;
				if (((previousValue != value) 
							|| (this._dtValueBand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtValueBand.Entity = null;
						previousValue.dtStocks.Remove(this);
					}
					this._dtValueBand.Entity = value;
					if ((value != null))
					{
						value.dtStocks.Add(this);
						this._ValueBandID = value.ivID;
					}
					else
					{
						this._ValueBandID = default(Nullable<int>);
					}
					this.SendPropertyChanged("dtValueBand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dtRefunds(dtRefund entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = this;
		}
		
		private void detach_dtRefunds(dtRefund entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = null;
		}
		
		private void attach_dtStockDetails(dtStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = this;
		}
		
		private void detach_dtStockDetails(dtStockDetail entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = null;
		}
		
		private void attach_dtStockHistories(dtStockHistory entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = this;
		}
		
		private void detach_dtStockHistories(dtStockHistory entity)
		{
			this.SendPropertyChanging();
			entity.dtStock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dtNotification")]
	public partial class dtNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NitificationID;
		
		private string _Name;
		
		private string _Description;
		
		private int _RaisedBy;
		
		private bool _IsNew;
		
		private string _EmailMsg;
		
		private string _ObjectType;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Viewed;
		
		private System.Nullable<System.Guid> _NotificationGUID;
		
		private EntityRef<dtUser> _dtUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNitificationIDChanging(int value);
    partial void OnNitificationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRaisedByChanging(int value);
    partial void OnRaisedByChanged();
    partial void OnIsNewChanging(bool value);
    partial void OnIsNewChanged();
    partial void OnEmailMsgChanging(string value);
    partial void OnEmailMsgChanged();
    partial void OnObjectTypeChanging(string value);
    partial void OnObjectTypeChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnViewedChanging(System.Nullable<System.DateTime> value);
    partial void OnViewedChanged();
    partial void OnNotificationGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnNotificationGUIDChanged();
    #endregion
		
		public dtNotification()
		{
			this._dtUser = default(EntityRef<dtUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NitificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NitificationID
		{
			get
			{
				return this._NitificationID;
			}
			set
			{
				if ((this._NitificationID != value))
				{
					this.OnNitificationIDChanging(value);
					this.SendPropertyChanging();
					this._NitificationID = value;
					this.SendPropertyChanged("NitificationID");
					this.OnNitificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaisedBy", DbType="Int NOT NULL")]
		public int RaisedBy
		{
			get
			{
				return this._RaisedBy;
			}
			set
			{
				if ((this._RaisedBy != value))
				{
					if (this._dtUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaisedByChanging(value);
					this.SendPropertyChanging();
					this._RaisedBy = value;
					this.SendPropertyChanged("RaisedBy");
					this.OnRaisedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit NOT NULL")]
		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailMsg", DbType="NVarChar(MAX)")]
		public string EmailMsg
		{
			get
			{
				return this._EmailMsg;
			}
			set
			{
				if ((this._EmailMsg != value))
				{
					this.OnEmailMsgChanging(value);
					this.SendPropertyChanging();
					this._EmailMsg = value;
					this.SendPropertyChanged("EmailMsg");
					this.OnEmailMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Viewed", DbType="DateTime")]
		public System.Nullable<System.DateTime> Viewed
		{
			get
			{
				return this._Viewed;
			}
			set
			{
				if ((this._Viewed != value))
				{
					this.OnViewedChanging(value);
					this.SendPropertyChanging();
					this._Viewed = value;
					this.SendPropertyChanged("Viewed");
					this.OnViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NotificationGUID
		{
			get
			{
				return this._NotificationGUID;
			}
			set
			{
				if ((this._NotificationGUID != value))
				{
					this.OnNotificationGUIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationGUID = value;
					this.SendPropertyChanged("NotificationGUID");
					this.OnNotificationGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dtUser_dtNotification", Storage="_dtUser", ThisKey="RaisedBy", OtherKey="uID", IsForeignKey=true)]
		public dtUser dtUser
		{
			get
			{
				return this._dtUser.Entity;
			}
			set
			{
				dtUser previousValue = this._dtUser.Entity;
				if (((previousValue != value) 
							|| (this._dtUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dtUser.Entity = null;
						previousValue.dtNotifications.Remove(this);
					}
					this._dtUser.Entity = value;
					if ((value != null))
					{
						value.dtNotifications.Add(this);
						this._RaisedBy = value.uID;
					}
					else
					{
						this._RaisedBy = default(int);
					}
					this.SendPropertyChanged("dtUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
