<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
             xmlns:Session="clr-namespace:Stocky.Session"
             xmlns:Controls="clr-namespace:Stocky.UI.Controls" x:Class="Stocky.App"
             StartupUri="Login/LoginView.xaml">
    <Application.Resources>
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="White"/>
        </Style>
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
        </Style>
        <LinearGradientBrush x:Key="ActionPanelBrush" StartPoint="0,0.5" EndPoint="1,0.5">
            <GradientStop Color="#FF2B2929" Offset="0.0"/>
            <GradientStop Color="White" Offset="0.9"/>
        </LinearGradientBrush>

        <Style TargetType="{x:Type Button}" x:Key ="Buttons" >
            <Setter Property ="Background" Value= "White"/>
            <Setter Property ="Width" Value ="100"/>
            <Setter Property ="Height" Value ="30"/>
            <Setter Property ="Margin" Value ="15,0,0,0"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type Button}">
                        <Grid x:Name= "grid">
                            <Border x:Name= "border" CornerRadius= "5" BorderBrush= "Black" BorderThickness= "1.0">
                                <Border.Background>
                                    <RadialGradientBrush GradientOrigin= "0.496,1.052" >
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY= "0.5" ScaleX= "1.5" ScaleY= "1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset ="1" Color ="White"/>
                                        <GradientStop Offset ="0.2" Color="White"/>
                                    </RadialGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment ="Center" VerticalAlignment= "Center" TextElement.FontWeight="Medium" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsPressed" Value= "True">
                                <Setter Property ="Background" TargetName= "border">
                                    <Setter.Value>
                                        <RadialGradientBrush GradientOrigin= "0.496,1.052" >
                                            <RadialGradientBrush.RelativeTransform>
                                                <TransformGroup>
                                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                    <TranslateTransform X="0.02" Y="0.3"/>
                                                </TransformGroup>
                                            </RadialGradientBrush.RelativeTransform>
                                            <GradientStop Color ="LightGray" Offset= "1"/>
                                            <GradientStop Color ="White" Offset= "0.3"/>
                                        </RadialGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property ="IsMouseOver" Value= "True">
                                <Setter Property ="BorderBrush" TargetName= "border" Value="#FF6600"/>
                            </Trigger>
                            <Trigger Property ="IsEnabled" Value= "False">
                                <Setter Property ="Opacity" TargetName ="grid" Value="0.25"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key ="ToolBarButtons" >
            <Setter Property ="Background" Value= "White"/>
            <Setter Property ="Width" Value ="100"/>
            <Setter Property ="Height" Value ="30"/>
            <Setter Property ="Margin" Value ="5,5,0,0"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type Button}">
                        <Grid x:Name= "grid">
                            <Border x:Name= "border" CornerRadius= "5" BorderBrush= "Black" BorderThickness= "1.0">
                                <Border.Background>
                                    <RadialGradientBrush GradientOrigin= "0.496,1.052" >
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY= "0.5" ScaleX= "1.5" ScaleY= "1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset ="1" Color ="White"/>
                                        <GradientStop Offset ="0.2" Color="White"/>
                                    </RadialGradientBrush>
                                </Border.Background>
                                <ContentPresenter HorizontalAlignment ="Center" VerticalAlignment= "Center" TextElement.FontWeight="Medium" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsPressed" Value= "True">
                                <Setter Property ="Background" TargetName= "border">
                                    <Setter.Value>
                                        <RadialGradientBrush GradientOrigin= "0.496,1.052" >
                                            <RadialGradientBrush.RelativeTransform>
                                                <TransformGroup>
                                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                    <TranslateTransform X="0.02" Y="0.3"/>
                                                </TransformGroup>
                                            </RadialGradientBrush.RelativeTransform>
                                            <GradientStop Color ="LightGray" Offset= "1"/>
                                            <GradientStop Color ="White" Offset= "0.3"/>
                                        </RadialGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property ="IsMouseOver" Value= "True">
                                <Setter Property ="BorderBrush" TargetName= "border" Value="#FF6600"/>
                            </Trigger>
                            <Trigger Property ="IsEnabled" Value= "False">
                                <Setter Property ="Opacity" TargetName ="grid" Value="0.25"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0"/>
        <Style x:Key="MainMenu" TargetType="{x:Type Menu}">
            <Setter Property="Background" Value="{StaticResource Menu.Static.Background}"/>
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Black" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="MenuItemControlTemplate1" TargetType="{x:Type MenuItem}">
            <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <Grid VerticalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                    <Path x:Name="GlyphPanel" Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="3" Visibility="Collapsed" VerticalAlignment="Center"/>
                    <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                        <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#FF2B2929" Padding="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                    </Canvas>
                                    <Rectangle Fill="#FFD7D7D7" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                    <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                </Trigger>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="#3D26A0DA"/>
                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF26A0DA"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="#FF707070"/>
                    <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF707070"/>
                </Trigger>
                <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type StackPanel}" x:Key="WindowHeader">
            <Setter Property="Background" Value="#FF2B2929"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="WindowHeaderTB">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="15"/>
            <Setter Property="VerticalAlignment" Value="Center"  />
        </Style>

        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle x:Name= "Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels ="True"/>
                            <Polygon x:Name= "Arrow" Fill= "Black" HorizontalAlignment= "Right" Margin= "8,8,3,3" Opacity= "0.15" Points= "0,10 10,10 10,0" Stretch ="Uniform" VerticalAlignment ="Bottom"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property ="IsMouseOver" Value= "True">
                                <Setter Property ="Stroke" TargetName ="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property ="IsPressed" Value= "True">
                                <Setter Property ="Fill" TargetName ="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property ="IsEnabled" Value= "False">
                                <Setter Property ="Visibility" TargetName= "Arrow" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key= "DataGridGeneral" TargetType="{x:Type DataGrid}">
            <Setter Property ="Background" Value= "White"/>
            <Setter Property ="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property ="BorderBrush" Value= "Black" />
            <Setter Property ="BorderThickness" Value= "2"/>
            <Setter Property ="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
            <Setter Property ="ScrollViewer.CanContentScroll" Value= "true"/>
            <Setter Property ="ScrollViewer.PanningMode" Value= "Both"/>
            <Setter Property ="Stylus.IsFlicksEnabled" Value= "False"/>
            <Setter Property ="HeadersVisibility" Value= "Column"/>
            <Setter Property ="FontSize" Value ="14"/>

            <Setter Property="RowHeaderWidth" Value="20"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type DataGrid}">
                        <Border BorderBrush ="{TemplateBinding BorderBrush}"  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels= "True">
                            <ScrollViewer x:Name= "DG_ScrollViewer" Focusable= "false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType ="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width ="Auto"/>
                                                <ColumnDefinition Width ="*"/>
                                                <ColumnDefinition Width ="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height ="Auto"/>
                                                <RowDefinition Height ="*"/>
                                                <RowDefinition Height ="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command= "{x:Static DataGrid.SelectAllCommand}"   Focusable= "false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <DataGridColumnHeadersPresenter x:Name= "PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <ScrollContentPresenter x:Name= "PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan= "2" Grid.Row= "1"/>
                                            <ScrollBar x:Name= "PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation= "Vertical" Grid.Row= "1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                            <Grid Grid.Column ="1" Grid.Row ="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                    <ColumnDefinition Width ="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name= "PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation= "Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin= "0,0,-9,0"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property ="IsGrouping" Value= "true"/>
                        <Condition Property= "VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property ="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style  TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property ="Background" Value= "White" />
            <Setter Property ="Height" Value ="30"/>
            <Setter Property ="Margin" Value ="-1,-1,0,0"/>
            <Setter Property ="BorderBrush" Value= "Black"/>
            <Setter Property ="BorderThickness" Value= "1"/>
            <Setter Property ="FontSize" Value ="16"/>

            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="MinWidth" Value="150"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Storyboard x:Key="OpenAnimation" x:Shared ="False" >
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty= "(UIElement.Opacity)" Storyboard.TargetName="{DynamicResource userControl}">
                <EasingDoubleKeyFrame KeyTime ="0" Value ="0"/>
                <EasingDoubleKeyFrame KeyTime ="0:0:0.1" Value ="0.3"/>
                <EasingDoubleKeyFrame KeyTime ="0:0:0.2" Value ="0.5"/>
                <EasingDoubleKeyFrame KeyTime ="0:0:0.3" Value ="0.7"/>
                <EasingDoubleKeyFrame KeyTime ="0:0:0.4" Value ="1"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Style x:Key= "FocusVisual" >
            <Setter Property ="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle StrokeDashArray ="1 2" StrokeThickness ="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels= "true" Margin= "2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key= "ComboBox.Static.Background" EndPoint="0,1" StartPoint= "0,0">
            <GradientStop Color ="White" Offset ="0.0"/>
            <GradientStop Color ="White" Offset ="3.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key= "ComboBox.Static.Border" Color="#FFACACAC" />
        <SolidColorBrush x:Key= "ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key= "ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
        <SolidColorBrush x:Key= "ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key= "ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key= "ComboBox.MouseOver.Glyph" Color="Black" />
        <LinearGradientBrush x:Key= "ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint= "0,0">
            <GradientStop Color ="#FFECF4FC" Offset= "0.0"/>
            <GradientStop Color ="#FFDCECFC" Offset= "1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key= "ComboBox.MouseOver.Border" Color="#FF7EB4EA" />
        <SolidColorBrush x:Key= "ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key= "ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
        <LinearGradientBrush x:Key= "ComboBox.MouseOver.Editable.Button.Background" EndPoint= "0,1" StartPoint= "0,0">
            <GradientStop Color ="#FFEBF4FC" Offset= "0.0"/>
            <GradientStop Color ="#FFDCECFC" Offset= "1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key= "ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key= "ComboBox.Pressed.Glyph" Color="#FF000000" />
        <LinearGradientBrush x:Key= "ComboBox.Pressed.Background" EndPoint="0,1" StartPoint= "0,0">
            <GradientStop Color ="#FFDAECFC" Offset= "0.0"/>
            <GradientStop Color ="#FFC4E0FC" Offset= "1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key= "ComboBox.Pressed.Border" Color="#FF569DE5" />
        <SolidColorBrush x:Key= "ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key= "ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
        <LinearGradientBrush x:Key= "ComboBox.Pressed.Editable.Button.Background" EndPoint= "0,1" StartPoint= "0,0">
            <GradientStop Color ="#FFDAEBFC" Offset= "0.0"/>
            <GradientStop Color ="#FFC4E0FC" Offset= "1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key= "ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key= "ComboBox.Disabled.Glyph" Color="#FFBFBFBF" />
        <SolidColorBrush x:Key= "ComboBox.Disabled.Background" Color="#FFF0F0F0" />
        <SolidColorBrush x:Key= "ComboBox.Disabled.Border" Color="#FFD9D9D9" />
        <SolidColorBrush x:Key= "ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key= "ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key= "ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key= "ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key= "ComboBox.Static.Glyph" Color="#FF606060" />
        <Style x:Key= "ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property ="OverridesDefaultStyle" Value= "true"/>
            <Setter Property ="IsTabStop" Value= "false"/>
            <Setter Property ="Focusable" Value= "false"/>
            <Setter Property ="ClickMode" Value= "Press"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type ToggleButton}">
                        <Border x:Name= "templateRoot" SnapsToDevicePixels="true" CornerRadius= "4" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
                            <Border x:Name= "splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels ="true" Margin= "0" HorizontalAlignment= "Right" BorderThickness= "1" BorderBrush= "Transparent" >
                                <Path x:Name= "arrow" VerticalAlignment= "Center" Margin= "0" HorizontalAlignment= "Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data ="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                    <Condition Binding ="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value= "false"/>
                                    <Condition Binding ="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value= "false"/>
                                    <Condition Binding ="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value= "true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property ="Background" TargetName= "splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
                                <Setter Property ="BorderBrush" TargetName= "splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
                            </MultiDataTrigger>
                            <Trigger Property ="IsMouseOver" Value= "true">
                                <Setter Property ="Fill" TargetName ="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value= "true"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value= "true"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property ="Background" TargetName= "splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                                <Setter Property ="BorderBrush" TargetName= "splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
                            </MultiDataTrigger>
                            <Trigger Property ="IsPressed" Value= "true">
                                <Setter Property ="Fill" TargetName ="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value= "true"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value= "true"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property ="Background" TargetName= "splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                                <Setter Property ="BorderBrush" TargetName= "splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
                            </MultiDataTrigger>
                            <Trigger Property ="IsEnabled" Value= "false">
                                <Setter Property ="Fill" TargetName ="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value= "false"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding ="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value= "false"/>
                                    <Condition Binding ="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property ="Background" TargetName= "templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property ="BorderBrush" TargetName= "templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property ="Background" TargetName= "splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
                                <Setter Property ="BorderBrush" TargetName= "splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key= "ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name= "templateRoot" SnapsToDevicePixels="true" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width ="*"/>
                    <ColumnDefinition MinWidth ="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width ="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name= "PART_Popup" AllowsTransparency="true" Grid.ColumnSpan= "2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin= "1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement ="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color ="Black" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" >
                        <Border x:Name= "dropDownBorder" BorderBrush="Transparent" BorderThickness= "0" Background= "LightBlue" >
                            <ScrollViewer x:Name= "DropDownScrollViewer" >
                                <Grid x:Name= "grid" RenderOptions.ClearTypeHint= "Enabled">
                                    <Canvas x:Name= "canvas" HorizontalAlignment= "Left" Height= "0" VerticalAlignment= "Top" Width= "0">
                                        <Rectangle x:Name= "opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height ="{Binding ActualHeight, ElementName=dropDownBorder}" Width ="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                    </Canvas>
                                    <ItemsPresenter x:Name= "ItemsPresenter"   KeyboardNavigation.DirectionalNavigation= "Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name= "toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan= "2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ComboBoxToggleButton}" />
                <ContentPresenter x:Name= "contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment= "Center" IsHitTestVisible= "false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment= "Center"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property ="HasDropShadow" SourceName= "PART_Popup" Value="false">
                    <Setter Property ="Margin" TargetName ="shadow" Value="0,0,5,5"/>
                    <Setter Property ="Color" TargetName ="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property ="HasItems" Value ="false">
                    <Setter Property ="Height" TargetName ="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property ="IsGrouping" Value= "true"/>
                        <Condition Property= "VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property ="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property ="ScrollViewer.CanContentScroll" SourceName= "DropDownScrollViewer" Value="false" >
                    <Setter Property ="Canvas.Top" TargetName= "opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property ="Canvas.Left" TargetName= "opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key= "TextBox.Static.Background" Color="#FFFFFFFF" />
        <Style x:Key= "ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property ="OverridesDefaultStyle" Value= "true"/>
            <Setter Property ="AllowDrop" Value= "true"/>
            <Setter Property ="MinWidth" Value ="0"/>
            <Setter Property ="MinHeight" Value= "0"/>
            <Setter Property ="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property ="ScrollViewer.PanningMode" Value= "VerticalFirst" />
            <Setter Property ="Stylus.IsFlicksEnabled" Value= "False"/>
            <Setter Property ="Template">
                <Setter.Value>
                    <ControlTemplate TargetType ="{x:Type TextBox}">
                        <ScrollViewer x:Name= "PART_ContentHost" Background= "Transparent" Focusable="false" HorizontalScrollBarVisibility ="Hidden" VerticalScrollBarVisibility= "Hidden"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key= "ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name= "templateRoot" SnapsToDevicePixels="true" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width ="*"/>
                    <ColumnDefinition MinWidth ="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width ="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name= "PART_Popup" AllowsTransparency="true" Grid.ColumnSpan= "2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement ="Bottom">
                    <Themes:SystemDropShadowChrome x:Name ="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name= "dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness= "1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" >
                            <ScrollViewer x:Name= "DropDownScrollViewer" >
                                <Grid x:Name= "grid" RenderOptions.ClearTypeHint= "Enabled">
                                    <Canvas x:Name= "canvas" HorizontalAlignment= "Left" Height= "0" VerticalAlignment= "Top" Width= "0">
                                        <Rectangle x:Name= "opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height ="{Binding ActualHeight, ElementName=dropDownBorder}" Width ="{Binding ActualWidth, ElementName=dropDownBorder}" />
                                    </Canvas>
                                    <ItemsPresenter x:Name= "ItemsPresenter" KeyboardNavigation.DirectionalNavigation= "Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name= "toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan= "2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}" />
                <Border x:Name= "border" Background="{StaticResource TextBox.Static.Background}" Margin ="{TemplateBinding BorderThickness}">
                    <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property ="IsEnabled" Value= "false">
                    <Setter Property ="Opacity" TargetName ="border" Value ="0.56"/>
                </Trigger>
                <Trigger Property ="IsKeyboardFocusWithin" Value= "true">
                    <Setter Property ="Foreground" Value= "Black"/>
                </Trigger>
                <Trigger Property ="HasDropShadow" SourceName= "PART_Popup" Value="true">
                    <Setter Property ="Margin" TargetName ="shadow" Value="0,0,5,5"/>
                    <Setter Property ="Color" TargetName ="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property ="HasItems" Value ="false">
                    <Setter Property ="Height" TargetName ="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property ="IsGrouping" Value= "true"/>
                        <Condition Property= "VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property ="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property ="ScrollViewer.CanContentScroll" SourceName= "DropDownScrollViewer" Value="false" >
                    <Setter Property ="Canvas.Top" TargetName= "opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property ="Canvas.Left" TargetName= "opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType ="{x:Type ComboBox}">
            <Setter Property ="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property ="Background" Value="{StaticResource ComboBox.Static.Background}"/>
            <Setter Property ="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
            <Setter Property ="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property ="BorderThickness" Value= "1"/>
            <Setter Property ="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property ="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property ="Padding" Value ="6,3,5,3"/>
            <Setter Property ="ScrollViewer.CanContentScroll" Value= "true"/>
            <Setter Property ="ScrollViewer.PanningMode" Value= "Both"/>
            <Setter Property ="Stylus.IsFlicksEnabled" Value= "False"/>
            <Setter Property ="Template" Value ="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property ="IsEditable" Value= "true">
                    <Setter Property ="IsTabStop" Value= "false"/>
                    <Setter Property ="Padding" Value ="2"/>
                    <Setter Property ="Template" Value ="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="MenuStyle1" TargetType="{x:Type Menu}">
            <Style.Resources>
                <Session:CurrentSession x:Key="UP"/>
            </Style.Resources>
            <Setter Property="Background" Value="{Binding CurrentTheme.MainBackground, Source={StaticResource UP}}"/>
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="PreferanceControl" TargetType="{x:Type ItemsControl}">
            <Setter Property="Margin" Value="0,0,0,0"/>
        </Style>
        <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
            <Setter Property="SizeToContent" Value="WidthAndHeight" />
            <Setter Property="ResizeMode" Value="CanMinimize" />
        </Style>
        <WindowStartupLocation x:Key="WSL">CenterOwner</WindowStartupLocation>

        <Style TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true" >
                    <Setter Property="Foreground" Value="Red"/>
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="BorderBrush" Value="Red"/>
                    <Setter Property="BorderThickness" Value="0.7"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="skMainTabControlStyle1" TargetType="{x:Type Controls:skMainTabControl}">
            <Setter Property="Padding" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#FFACACAC"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Controls:skMainTabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                <RowDefinition x:Name="RowDefinition1" Height="*"/>
                            </Grid.RowDefinitions>
                            <TabPanel x:Name="HeaderPanel" Background="Transparent" Grid.Column="0" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                                <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                                <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="TabItem">
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate  DataType="TabItem">
                                    <DockPanel >
                                        <Button  DockPanel.Dock="Right" Margin="5,0,0,0" Style="{DynamicResource TabControlButtons}"  Command="{x:Static Controls:skMainTabControl.CloseTab}">
                                            <Image Source="/StockyMain;component/Resources/CloseButton.png" Height="20" Width="20" ></Image>
                                        </Button>
                                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=Header}" VerticalAlignment="Center" />
                                    </DockPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button" x:Key="TabControlButtons">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
        </Style>

        <LinearGradientBrush x:Key="Buttongradient" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="White" Offset="0.0"/>
            <GradientStop Color="#FFF1F1F1" Offset="1.0"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="Buttonborder" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="Gainsboro" Offset="0.0"/>
            <GradientStop Color="DarkGray" Offset="1.0"/>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="ButtonPressgradient" StartPoint="0.500023,0.999996" EndPoint="0.500023,4.37507e-006">
            <GradientStop Color="White" Offset="1"/>
            <GradientStop Color="LightGray" Offset="0"/>
        </LinearGradientBrush>

        <Style x:Key="addButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource Buttongradient}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Buttonborder}" />
            <Setter Property="Content" Value="Add"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1.5">
                            <Grid>
                                <Path x:Name="PathIcon" Width="8" Height="8" Margin="8,1,0,0" Stretch="Fill" Fill="DarkGreen" Data="M 0 0 L 5 0 L 5 -5 L 10 -5 L 10 0 L 15 0 L 15 5 L 10 5 L 10 10 L 5 10 L 5 5 L 0 5 Z" HorizontalAlignment="Left"/>
                                <Line  HorizontalAlignment="Left" Margin="26,0,0,0" Name="line4" Stroke="Black" VerticalAlignment="Top" Width="2" Y1="0" Y2="640" Opacity="0.5" />
                                <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,3,0,3"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ButtonPressgradient}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="removeButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource Buttongradient}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Buttonborder}"/>
            <Setter Property="Content" Value="Remove"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1.5">
                            <Grid>
                                <Path x:Name="PathIcon" Width="8" Height="8" Margin="8,1,0,0" StrokeThickness="2" Stretch="Fill" Stroke="DarkRed" Data="M0,0 L1,1 M0,1 L1,0" HorizontalAlignment="Left"/>
                                <Line  HorizontalAlignment="Left" Margin="26,0,0,0" Name="line4" Stroke="Black" VerticalAlignment="Top" Width="2" Y1="0" Y2="640" Opacity="0.5"/>
                                <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,3,0,3"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ButtonPressgradient}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="clearButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource Buttongradient}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource Buttonborder}"/>
            <Setter Property="Content" Value="Clear"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1.5">
                            <Grid>
                                <Path x:Name="PathIcon" Width="8" Height="8" Margin="8,1,0,0" StrokeThickness="2" Stretch="Fill" Stroke="DarkBlue" Data="M 0,0 A 180,180 180 1 1 1,1 Z" HorizontalAlignment="Left"/>
                                <Line  HorizontalAlignment="Left" Margin="26,0,0,0" Name="line4" Stroke="Black" VerticalAlignment="Top" Width="2" Y1="0" Y2="640" Opacity="0.5"/>
                                <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="40,3,0,3"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ButtonPressgradient}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" Value="#FFADB2B5"/>
                                <Setter Property="TextElement.Foreground" Value="#FF838383"/>
                            </Trigger>                            
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        
        <!--New UI Resources-->
        <Session:CurrentSession x:Key="Themes"/>
        
        <Style x:Key="MinMaxCloseButtons" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.MenuFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <Grid>
                                <Border Background="{TemplateBinding Background}">
                                    <TextBlock 
                                        x:Name="Content" 
                                        Text="{TemplateBinding Content}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        Padding="5"/>
                                </Border>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuExpanderButton" TargetType="{x:Type Button}">
            <Setter Property="Content" Value="≡"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="40"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{Binding  CurrentTheme.MenuFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="34"/>
            <Setter Property="FontStretch" Value="UltraExpanded"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" Padding="0,0,0,10">
                            <Border Background="{TemplateBinding Background}">
                                <TextBlock 
                                        x:Name="Content" 
                                        Text="{TemplateBinding Content}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="AddRemoveClearButtons" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}">
                            <Grid>
                                <Border Background="{TemplateBinding Background}">
                                    <TextBlock 
                                        x:Name="Content" 
                                        Text="{TemplateBinding Content}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        Padding="5"/>
                                </Border>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                                <Setter Property="Foreground" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Foreground" Value="{Binding FCurrentTheme.ontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuButton" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="50"/>
            <Setter Property="Margin" Value="10,10,10,0"/>
            <Setter Property="Background" Value="{Binding CurrentTheme.SecondaryColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.MenuFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="White" BorderThickness="0" >
                            <Grid>
                                <TextBlock Text="{TemplateBinding Content}"
                                           HorizontalAlignment="Stretch" 
                                           VerticalAlignment="Center"
                                           Padding="20"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="LoginButton" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Background" Value="{Binding CurrentTheme.SecondaryColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.MenuFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="White" BorderThickness="0" >
                            <Grid>
                                <TextBlock Text="{TemplateBinding Content}"
                                           HorizontalAlignment="Center" 
                                           VerticalAlignment="Center"
                                           Padding="20"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuContextButton" TargetType="{x:Type Button}">
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="10,10,10,0"/>
            <Setter Property="Background" Value="{Binding CurrentTheme.SecondaryColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.MenuFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="0.5"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <Grid>
                                <TextBlock Text="{TemplateBinding Content}" 
                                           TextWrapping="Wrap"
                                           HorizontalAlignment="Stretch" 
                                           VerticalAlignment="Center"
                                           Padding="20"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SaveCloseButtons" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="50"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}" BorderThickness="0.5">
                            <Grid>
                                <TextBlock Text="{TemplateBinding Content}" 
                                           HorizontalAlignment="Center" 
                                           VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Cursor" Value="Hand"/>
                                <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                                <Setter Property="Foreground" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                        <Border BorderThickness="0.5" BorderBrush="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}" Background="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}">
                            <TextBlock x:Name="ContentHeader" Text="{TemplateBinding Content}" Padding="5"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="IsHitTestVisible" Value="True"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontSize" Value="12" />
        </Style>

        <Style x:Key="YesNoCheckBoxSlide" TargetType="{x:Type CheckBox}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="Background" Value="#FF2A343F"/>
            <Setter Property="Content" Value="No"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="29"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="4"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel" >
                            <Grid Width="44" Height="16">
                                <Border Margin="0" BorderThickness="2" BorderBrush="White">
                                    <Grid Width="40" Background="#FF2A343F" >
                                        <Border Margin="2" x:Name="baseRectangle" BorderThickness="0" Background="#FF615E5E"/>
                                    </Grid>
                                </Border>
                                <Border x:Name="slider" HorizontalAlignment="Left" Margin="0" Width="10" BorderThickness="0.75" BorderBrush="Black" RenderTransformOrigin="0.5,0.5" Background="#FF007ACC" >
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1.25" ScaleY="1.25"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="4" Y="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                            </Grid>
                            <ContentPresenter Margin="5,0,5,0" HorizontalAlignment="Right" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                                </Trigger.EnterActions>
                                <Setter Property="Content" Value="Yes"/>
                                <Setter Property="Background" TargetName="baseRectangle" Value="#FF007ACC"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="DownMenuPopup" TargetType="{x:Type Popup}">
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="Placement" Value="Right"/>
            <Setter Property="VerticalOffset" Value="10"/>
            <Setter Property="HorizontalOffset" Value="-100"/>
            <Setter Property="StaysOpen" Value="False"/>
            <Setter Property="MinWidth" Value="150"/>
        </Style>

        <Style x:Key="UpMenuPopup" TargetType="{x:Type Popup}">
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="Placement" Value="Right"/>
            <Setter Property="VerticalOffset" Value="-100"/>
            <Setter Property="HorizontalOffset" Value="-100"/>
            <Setter Property="StaysOpen" Value="False"/>
            <Setter Property="MinWidth" Value="150"/>
        </Style>

        <Style x:Key="LogOutExitMenuPopup" TargetType="{x:Type Popup}">
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="Placement" Value="Right"/>
            <Setter Property="VerticalOffset" Value="-80"/>
            <Setter Property="HorizontalOffset" Value="-100"/>
            <Setter Property="StaysOpen" Value="False"/>
            <Setter Property="MinWidth" Value="220"/>
        </Style>

        <Style x:Key="MenuExpander" TargetType="{x:Type Expander}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="IsExpanded" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <DockPanel>
                            <ContentPresenter x:Name="ExpandSite" 
                                                  DockPanel.Dock="Bottom" 
                                                  Focusable="false" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  Margin="{TemplateBinding Padding}" 
                                                  Visibility="Collapsed" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TabCloseButton" TargetType="{x:Type Button}">
            <Setter Property="Height" Value="20"/>
            <Setter Property="Width" Value="20"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Margin="10,0,0,0">
                            <TextBlock 
                                        x:Name="Content" 
                                        Text="{TemplateBinding Content}" 
                                        HorizontalAlignment="Center" 
                                        VerticalAlignment="Center"
                                        Height="20"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="FontWeight" Value="Bold"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--<Style TargetType="{x:Type t:CloseableTab}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type t:CloseableTab}">
                        <Border x:Name="tabBorder" Padding="10" Background="Transparent" Width="Auto">
                            <DockPanel x:Name="bob">
                                <ContentPresenter x:Name="Content" 
                                                      TextBlock.Foreground="{Binding FontColour, Source={StaticResource Themes}}"
                                                      VerticalAlignment="Stretch"
                                                      HorizontalAlignment="Stretch"
                                                      ContentSource="Header"/>
                                <Button x:Name="CloseButton" Content="X" Style="{StaticResource TabCloseButton}" Visibility="Hidden" HorizontalAlignment="Right" Command="{x:Static t:CloseableTab.CloseTab}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="tabBorder" Property="Background" Value="{Binding HighlightColour, Source={StaticResource Themes}}" />
                                <Setter TargetName="Content" Property="TextBlock.Foreground" Value="{Binding HighlightFontColour, Source={StaticResource Themes}}"/>
                                <Setter TargetName="CloseButton" Property="Foreground" Value="{Binding HighlightFontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger SourceName="tabBorder" Property="IsMouseOver" Value="True">
                                <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <Style x:Key="MainLabel" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style x:Key="MainTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="CaretBrush" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <Style x:Key="MainPasswordBox" TargetType="{x:Type PasswordBox}">
            <Setter Property="PasswordChar" Value="●"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="CaretBrush" Value="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type PasswordBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="MainDatePicker" TargetType="{x:Type DatePicker}">
            <Setter Property="IsTodayHighlighted" Value="True"/>
            <Setter Property="SelectedDateFormat" Value="Short"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DatePicker}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.Resources>
                                    <SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
                                    <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition GeneratedDuration="0"/>
                                                        <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                                        <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed"/>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Normal"/>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background"/>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Background">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="BackgroundGradient">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled"/>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>
                                                <Border x:Name="Highlight" BorderBrush="#FF45D6FA" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,1,1" Margin="-1" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                                <Border x:Name="Background" BorderBrush="#FFFFFFFF" BorderThickness="1" Background="#FF1F3B53" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3"/>
                                                <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                                                    <Border.Background>
                                                        <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625"/>
                                                            <GradientStop Color="#C6FFFFFF" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                            <GradientStop Color="#FF4084BD"/>
                                                            <GradientStop Color="#FFAFCFEA" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                    <Rectangle.Stroke>
                                                        <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                            <GradientStop Color="#FF494949"/>
                                                            <GradientStop Color="#FF9F9F9F" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Stroke>
                                                </Rectangle>
                                                <Path Grid.ColumnSpan="4" Grid.Column="0" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Fill="#FF2F2F2F" HorizontalAlignment="Center" Margin="4,3,4,3" Grid.Row="1" Grid.RowSpan="3" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Center"/>
                                                <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3"/>
                                                <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="3,0,3,0" Grid.Row="0" Template="{StaticResource DropDownButtonTemplate}" VerticalAlignment="Top" Width="20"/>
                                <DatePickerTextBox x:Name="PART_TextBox" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" VerticalContentAlignment="Stretch"/>
                                <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Column="0" Fill="#A5FFFFFF" RadiusY="1" Grid.Row="0" RadiusX="1"/>
                                    <Rectangle Grid.Column="1" Fill="#A5FFFFFF" Height="18" Margin="3,0,3,0" RadiusY="1" Grid.Row="0" RadiusX="1" Width="19"/>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False"/>
                                </Grid>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="false">
                                <Setter Property="Foreground" TargetName="PART_TextBox" Value="{Binding CurrentTheme.Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SubTabItem" TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Border x:Name="Border" 
                                BorderThickness="0,0,0,1" 
                                Margin="10,0,0,1" 
                                Width="Auto" 
                                Height="50"
                                BorderBrush="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}">
                            <TextBlock Name="Text" Text="{TemplateBinding Header}" 
                                       TextWrapping="Wrap"
                                       Foreground="{Binding CurrentTheme.FontColour, Source={StaticResource Themes}}"
                                       HorizontalAlignment="Stretch" 
                                       VerticalAlignment="Center"
                                       Padding="15"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
                                <Setter TargetName="Text" Property="Foreground" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GridSplitterPreviewStyle">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Fill="#80000000"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainGridSplitter" TargetType="{x:Type GridSplitter}">
            <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="0,5,5,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridSplitter}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainListView" TargetType="{x:Type ListView}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListView}">
                        <Themes:ListBoxChrome x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                            <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Themes:ListBoxChrome>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="true"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="HeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="{Binding CurrentTheme.HighlightColour, Source={StaticResource Themes}}"/>
            <Setter Property="Foreground" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.HighlightFontColour, Source={StaticResource Themes}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Padding" Value="15,0,0,0"/>
            <Setter Property="MinHeight" Value="30"/>
            <Setter Property="Cursor" Value="Hand"/>
        </Style>

        <Style x:Key="SubBorder" TargetType="Border">
            <Setter Property="BorderBrush" Value="{Binding CurrentTheme.BorderColour, Source={StaticResource Themes}}"/>
        </Style>

        <Storyboard x:Key="animateFadeOut">
            <DoubleAnimation BeginTime="0:0:0.0" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1.0"/>
            <ObjectAnimationUsingKeyFrames BeginTime="0:0:1.0" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Collapsed</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="animateFadeIn">
            <DoubleAnimation BeginTime="0:0:0.0" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1.0"/>
            <ObjectAnimationUsingKeyFrames BeginTime="0:0:0.0" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
    </Application.Resources>
</Application>
